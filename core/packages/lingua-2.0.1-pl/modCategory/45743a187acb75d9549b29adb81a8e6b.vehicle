<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'f845eed70c374f6311550e2e4a08c7b8' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":1,"name":"lingua.selector","description":"Languages selector drop down.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Lingua\\n *\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\n *\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\n *\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation version 3.\\n *\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package lingua\\n * @subpackage lingua_selector\\n *\\/\\n$tplWrapper = $modx->getOption(\'tplWrapper\', $scriptProperties, \'lingua.selector.wrapper\');\\n$tplItem = $modx->getOption(\'tplItem\', $scriptProperties, \'lingua.selector.item\');\\n$langKey = $modx->getOption(\'getKey\', $scriptProperties, $modx->getOption(\'lingua.get_key\', null, \'lang\'));\\n$sortby = $modx->getOption(\'sortby\', $scriptProperties, \'id\');\\n$sortdir = $modx->getOption(\'sortdir\', $scriptProperties, \'asc\');\\n$phsPrefix = $modx->getOption(\'phsPrefix\', $scriptProperties, \'lingua.\');\\n$codeField = $modx->getOption(\'codeField\', $scriptProperties, \'lang_code\');\\n\\n$defaultLinguaCorePath = $modx->getOption(\'core_path\') . \'components\\/lingua\\/\';\\n$linguaCorePath = $modx->getOption(\'lingua.core_path\', null, $defaultLinguaCorePath);\\n$lingua = $modx->getService(\'lingua\', \'Lingua\', $linguaCorePath . \'model\\/lingua\\/\', $scriptProperties);\\n\\nif (!($lingua instanceof Lingua)) {\\n    return;\\n}\\n\\n$allowedContexts = $modx->getOption(\'lingua.contexts\');\\n$allowedContexts = array_map(\'trim\', @explode(\',\', $allowedContexts));\\n$currentContext = $modx->context->get(\'key\');\\nif (!in_array($currentContext, $allowedContexts)) {\\n    return;\\n}\\n\\n$c = $modx->newQuery(\'linguaLangs\');\\n$c->where(\'active=1\');\\n$linguaLangs = $modx->context->config[\'lingua.langs\'];\\nif (!empty($linguaLangs)) {\\n    $linguaLangs = array_map(\'trim\', @explode(\',\', $linguaLangs));\\n    $c->where(array(\\n        \'lang_code:IN\' => $linguaLangs\\n    ));\\n}\\n$linguaLcids = $modx->context->config[\'lingua.lcids\'];\\nif (!empty($linguaLcids)) {\\n    $linguaLcids = array_map(\'trim\', @explode(\',\', $linguaLcids));\\n    $c->where(array(\\n        \'lcid_string:IN\' => $linguaLcids\\n    ));\\n}\\n$c->sortby($sortby, $sortdir);\\n$collection = $modx->getCollection(\'linguaLangs\', $c);\\n$output = \'\';\\nif (!$collection) {\\n    return;\\n}\\n$pageURL = \'http\';\\nif (isset($_SERVER[\\"HTTPS\\"]) && $_SERVER[\\"HTTPS\\"] == \\"on\\") {\\n    $pageURL .= \\"s\\";\\n}\\n$pageURL .= \\":\\/\\/\\";\\nif ($_SERVER[\\"SERVER_PORT\\"] !== \\"80\\") {\\n    $pageURL .= $_SERVER[\\"SERVER_NAME\\"] . \\":\\" . $_SERVER[\\"SERVER_PORT\\"] . $_SERVER[\\"REQUEST_URI\\"];\\n} else {\\n    $pageURL .= $_SERVER[\\"SERVER_NAME\\"] . $_SERVER[\\"REQUEST_URI\\"];\\n}\\n$parseUrl = parse_url($pageURL);\\nif (!empty($parseUrl[\'query\'])) {\\n    \\/**\\n     * http:\\/\\/stackoverflow.com\\/a\\/7753154\\/1246646\\n     *\\/\\n    if (!function_exists(\'http_build_url\')) {\\n        define(\'HTTP_URL_REPLACE\', 1);              \\/\\/ Replace every part of the first URL when there\'s one of the second URL\\n        define(\'HTTP_URL_JOIN_PATH\', 2);            \\/\\/ Join relative paths\\n        define(\'HTTP_URL_JOIN_QUERY\', 4);           \\/\\/ Join query strings\\n        define(\'HTTP_URL_STRIP_USER\', 8);           \\/\\/ Strip any user authentication information\\n        define(\'HTTP_URL_STRIP_PASS\', 16);          \\/\\/ Strip any password authentication information\\n        define(\'HTTP_URL_STRIP_AUTH\', 32);          \\/\\/ Strip any authentication information\\n        define(\'HTTP_URL_STRIP_PORT\', 64);          \\/\\/ Strip explicit port numbers\\n        define(\'HTTP_URL_STRIP_PATH\', 128);         \\/\\/ Strip complete path\\n        define(\'HTTP_URL_STRIP_QUERY\', 256);        \\/\\/ Strip query string\\n        define(\'HTTP_URL_STRIP_FRAGMENT\', 512);     \\/\\/ Strip any fragments (#identifier)\\n        define(\'HTTP_URL_STRIP_ALL\', 1024);         \\/\\/ Strip anything but scheme and host\\n\\n        \\/**\\n         * Build an URL<br>\\n         * The parts of the second URL will be merged into the first according to the flags argument.<br><br>\\n         *\\n         * @param\\tmixed\\t$url\\t(Part(s) of) an URL in form of a string or associative array like parse_url() returns\\n         * @param\\tmixed\\t$parts\\tSame as the first argument\\n         * @param\\tint\\t\\t$flags\\tA bitmask of binary or\'ed HTTP_URL constants (Optional)HTTP_URL_REPLACE is the default\\n         * @param\\tarray\\t$newUrl\\tIf set, it will be filled with the parts of the composed url like parse_url() would return\\n         * @return\\tstring\\t\\t\\tBuilt URL\\n         *\\/\\n        function http_build_url($url, $parts = array(), $flags = HTTP_URL_REPLACE, &$newUrl = false) {\\n            $keys = array(\'user\', \'pass\', \'port\', \'path\', \'query\', \'fragment\');\\n\\n            \\/\\/ HTTP_URL_STRIP_ALL becomes all the HTTP_URL_STRIP_Xs\\n            if ($flags & HTTP_URL_STRIP_ALL) {\\n                $flags |= HTTP_URL_STRIP_USER;\\n                $flags |= HTTP_URL_STRIP_PASS;\\n                $flags |= HTTP_URL_STRIP_PORT;\\n                $flags |= HTTP_URL_STRIP_PATH;\\n                $flags |= HTTP_URL_STRIP_QUERY;\\n                $flags |= HTTP_URL_STRIP_FRAGMENT;\\n            }\\n            \\/\\/ HTTP_URL_STRIP_AUTH becomes HTTP_URL_STRIP_USER and HTTP_URL_STRIP_PASS\\n            else if ($flags & HTTP_URL_STRIP_AUTH) {\\n                $flags |= HTTP_URL_STRIP_USER;\\n                $flags |= HTTP_URL_STRIP_PASS;\\n            }\\n\\n            \\/\\/ Parse the original URL\\n            $parseUrl = parse_url($url);\\n\\n            \\/\\/ Scheme and Host are always replaced\\n            if (isset($parts[\'scheme\']))\\n                $parseUrl[\'scheme\'] = $parts[\'scheme\'];\\n            if (isset($parts[\'host\']))\\n                $parseUrl[\'host\'] = $parts[\'host\'];\\n\\n            \\/\\/ (If applicable) Replace the original URL with it\'s new parts\\n            if ($flags & HTTP_URL_REPLACE) {\\n                foreach ($keys as $key) {\\n                    if (isset($parts[$key]))\\n                        $parseUrl[$key] = $parts[$key];\\n                }\\n            }\\n            else {\\n                \\/\\/ Join the original URL path with the new path\\n                if (isset($parts[\'path\']) && ($flags & HTTP_URL_JOIN_PATH)) {\\n                    if (isset($parseUrl[\'path\']))\\n                        $parseUrl[\'path\'] = rtrim(str_replace(basename($parseUrl[\'path\']), \'\', $parseUrl[\'path\']), \'\\/\') . \'\\/\' . ltrim($parts[\'path\'], \'\\/\');\\n                    else\\n                        $parseUrl[\'path\'] = $parts[\'path\'];\\n                }\\n\\n                \\/\\/ Join the original query string with the new query string\\n                if (isset($parts[\'query\']) && ($flags & HTTP_URL_JOIN_QUERY)) {\\n                    if (isset($parseUrl[\'query\']))\\n                        $parseUrl[\'query\'] .= \'&\' . $parts[\'query\'];\\n                    else\\n                        $parseUrl[\'query\'] = $parts[\'query\'];\\n                }\\n            }\\n\\n            \\/\\/ Strips all the applicable sections of the URL\\n            \\/\\/ Note: Scheme and Host are never stripped\\n            foreach ($keys as $key) {\\n                if ($flags & (int) constant(\'HTTP_URL_STRIP_\' . strtoupper($key)))\\n                    unset($parseUrl[$key]);\\n            }\\n\\n            $newUrl = $parseUrl;\\n\\n            return\\n                    ((isset($parseUrl[\'scheme\'])) ? $parseUrl[\'scheme\'] . \':\\/\\/\' : \'\')\\n                    . ((isset($parseUrl[\'user\'])) ? $parseUrl[\'user\'] . ((isset($parseUrl[\'pass\'])) ? \':\' . $parseUrl[\'pass\'] : \'\') . \'@\' : \'\')\\n                    . ((isset($parseUrl[\'host\'])) ? $parseUrl[\'host\'] : \'\')\\n                    . ((isset($parseUrl[\'port\'])) ? \':\' . $parseUrl[\'port\'] : \'\')\\n                    . ((isset($parseUrl[\'path\'])) ? $parseUrl[\'path\'] : \'\')\\n                    . ((isset($parseUrl[\'query\'])) ? \'?\' . $parseUrl[\'query\'] : \'\')\\n                    . ((isset($parseUrl[\'fragment\'])) ? \'#\' . $parseUrl[\'fragment\'] : \'\')\\n            ;\\n        }\\n\\n    }\\n\\n    parse_str($parseUrl[\'query\'], $queries);\\n    unset($queries[$langKey]);\\n    $parseUrl[\'query\'] = http_build_query($queries);\\n\\n    $pageURL = http_build_url($pageURL, $parseUrl);\\n    $pageURL = urldecode($pageURL);\\n    \\/\\/ replace: &queryarray[0]=foo&queryarray[1]=bar\\n    \\/\\/ to:\\t\\t&queryarray[]=foo&queryarray[]=bar\\n    $pageURL = preg_replace(\'\\/\\\\[+(\\\\d)+\\\\]+\\/\', \'[]\', $pageURL);\\n}\\n\\n$pageURL = rtrim($pageURL, \'?\');\\n$hasQuery = strstr($pageURL, \'?\');\\n\\n$languages = array();\\n$originPageUrl = $pageURL;\\n$requestUri = str_replace(MODX_BASE_URL, \'\', $parseUrl[\'path\']);\\n\\/\\/ $modx->getOption(\'cultureKey\') is overriden by plugin!\\n$modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\n$cultureKey = $modCultureKey->get(\'value\');\\n\\n$baseUrl = $modx->getOption(\'base_url\', $scriptProperties);\\n$baseUrl = str_replace(MODX_BASE_URL, \'\', $baseUrl);\\n$baseUrl = trim($baseUrl, \'\\/\');\\n$originResource = $modx->getObject(\'modResource\', $modx->resource->get(\'id\'));\\n\\nforeach ($collection as $item) {\\n    if ($item->get(\'lang_code\') === $modx->cultureKey) {\\n        continue;\\n    }\\n    $itemArray = $item->toArray($phsPrefix);\\n    $cloneSite = $modx->getObject(\'linguaSiteContent\', array(\\n        \'resource_id\' => $modx->resource->get(\'id\'),\\n        \'lang_id\' => $item->get(\'id\'),\\n    ));\\n    if ($modx->getOption(\'friendly_urls\')) {\\n        $itemUri = \'\';\\n        if ($itemArray[$phsPrefix . \'lang_code\'] === $cultureKey) {\\n            $itemUri = $originResource->get(\'uri\');\\n        } elseif ($cloneSite) {\\n            $itemUri = $cloneSite->get(\'uri\');\\n        }\\n        \\n        if (!empty($itemUri)) {\\n            $matches = null;\\n            preg_match(\'\\/(\\\\\\/)*$\\/\', $itemUri, $matches);\\n            $search = $requestUri . (!empty($matches[0]) ? $matches[1] : \'\');\\n            $replace = (!empty($baseUrl) ? $baseUrl . \'\\/\' : \'\') . $itemUri;\\n            $pageURL = str_replace($search, $replace, $originPageUrl);\\n        }\\n    }\\n\\n    $itemArray[$phsPrefix . \'url\'] = $pageURL . (!empty($hasQuery) ? \'&\' : \'?\') . $langKey . \'=\' . $itemArray[$phsPrefix . $codeField];\\n\\/\\/    $itemArray[$phsPrefix . \'url\'] = $pageURL;\\n\\n    if (!empty($toArray)) {\\n        $languages[] = $itemArray;\\n    } else {\\n        $languages[] = $lingua->parseTpl($tplItem, $itemArray);\\n    }\\n}\\n\\nif (!empty($toArray)) {\\n    $wrapper = array(\\n        $phsPrefix . \'languages\' => $languages\\n    );\\n    $output = \'<pre>\' . print_r($wrapper, TRUE) . \'<\\/pre>\';\\n} else {\\n    $selection = @implode(\\"\\\\n\\", $languages);\\n    $wrapper = array($phsPrefix . \'languages\' => $selection);\\n    $output = $lingua->parseTpl($tplWrapper, $wrapper);\\n}\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return;\\n}\\nreturn $output;","locked":0,"properties":"a:7:{s:9:\\"codeField\\";a:7:{s:4:\\"name\\";s:9:\\"codeField\\";s:4:\\"desc\\";s:19:\\"prop_codeField_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"lang_code\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"getKey\\";a:7:{s:4:\\"name\\";s:6:\\"getKey\\";s:4:\\"desc\\";s:16:\\"prop_getKey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"lang\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"phsPrefix\\";a:7:{s:4:\\"name\\";s:9:\\"phsPrefix\\";s:4:\\"desc\\";s:19:\\"prop_phsPrefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"lingua.\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"sortby\\";a:7:{s:4:\\"name\\";s:6:\\"sortby\\";s:4:\\"desc\\";s:16:\\"prop_sortby_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:2:\\"ID\\";s:5:\\"value\\";s:2:\\"id\\";}i:1;a:2:{s:4:\\"text\\";s:8:\\"iso_code\\";s:5:\\"value\\";s:8:\\"iso_code\\";}}s:5:\\"value\\";s:2:\\"id\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"sortdir\\";a:7:{s:4:\\"name\\";s:7:\\"sortdir\\";s:4:\\"desc\\";s:17:\\"prop_sortdir_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"ASC\\";s:5:\\"value\\";s:3:\\"asc\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"DESC\\";s:5:\\"value\\";s:4:\\"desc\\";}}s:5:\\"value\\";s:3:\\"asc\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"tplItem\\";a:7:{s:4:\\"name\\";s:7:\\"tplItem\\";s:4:\\"desc\\";s:17:\\"prop_tplItem_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\"lingua.selector.item\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"tplWrapper\\";a:7:{s:4:\\"name\\";s:10:\\"tplWrapper\\";s:4:\\"desc\\";s:20:\\"prop_tplWrapper_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:23:\\"lingua.selector.wrapper\\";s:7:\\"lexicon\\";s:15:\\"lingua:property\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * Lingua\\n *\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\n *\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\n *\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation version 3.\\n *\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package lingua\\n * @subpackage lingua_selector\\n *\\/\\n$tplWrapper = $modx->getOption(\'tplWrapper\', $scriptProperties, \'lingua.selector.wrapper\');\\n$tplItem = $modx->getOption(\'tplItem\', $scriptProperties, \'lingua.selector.item\');\\n$langKey = $modx->getOption(\'getKey\', $scriptProperties, $modx->getOption(\'lingua.get_key\', null, \'lang\'));\\n$sortby = $modx->getOption(\'sortby\', $scriptProperties, \'id\');\\n$sortdir = $modx->getOption(\'sortdir\', $scriptProperties, \'asc\');\\n$phsPrefix = $modx->getOption(\'phsPrefix\', $scriptProperties, \'lingua.\');\\n$codeField = $modx->getOption(\'codeField\', $scriptProperties, \'lang_code\');\\n\\n$defaultLinguaCorePath = $modx->getOption(\'core_path\') . \'components\\/lingua\\/\';\\n$linguaCorePath = $modx->getOption(\'lingua.core_path\', null, $defaultLinguaCorePath);\\n$lingua = $modx->getService(\'lingua\', \'Lingua\', $linguaCorePath . \'model\\/lingua\\/\', $scriptProperties);\\n\\nif (!($lingua instanceof Lingua)) {\\n    return;\\n}\\n\\n$allowedContexts = $modx->getOption(\'lingua.contexts\');\\n$allowedContexts = array_map(\'trim\', @explode(\',\', $allowedContexts));\\n$currentContext = $modx->context->get(\'key\');\\nif (!in_array($currentContext, $allowedContexts)) {\\n    return;\\n}\\n\\n$c = $modx->newQuery(\'linguaLangs\');\\n$c->where(\'active=1\');\\n$linguaLangs = $modx->context->config[\'lingua.langs\'];\\nif (!empty($linguaLangs)) {\\n    $linguaLangs = array_map(\'trim\', @explode(\',\', $linguaLangs));\\n    $c->where(array(\\n        \'lang_code:IN\' => $linguaLangs\\n    ));\\n}\\n$linguaLcids = $modx->context->config[\'lingua.lcids\'];\\nif (!empty($linguaLcids)) {\\n    $linguaLcids = array_map(\'trim\', @explode(\',\', $linguaLcids));\\n    $c->where(array(\\n        \'lcid_string:IN\' => $linguaLcids\\n    ));\\n}\\n$c->sortby($sortby, $sortdir);\\n$collection = $modx->getCollection(\'linguaLangs\', $c);\\n$output = \'\';\\nif (!$collection) {\\n    return;\\n}\\n$pageURL = \'http\';\\nif (isset($_SERVER[\\"HTTPS\\"]) && $_SERVER[\\"HTTPS\\"] == \\"on\\") {\\n    $pageURL .= \\"s\\";\\n}\\n$pageURL .= \\":\\/\\/\\";\\nif ($_SERVER[\\"SERVER_PORT\\"] !== \\"80\\") {\\n    $pageURL .= $_SERVER[\\"SERVER_NAME\\"] . \\":\\" . $_SERVER[\\"SERVER_PORT\\"] . $_SERVER[\\"REQUEST_URI\\"];\\n} else {\\n    $pageURL .= $_SERVER[\\"SERVER_NAME\\"] . $_SERVER[\\"REQUEST_URI\\"];\\n}\\n$parseUrl = parse_url($pageURL);\\nif (!empty($parseUrl[\'query\'])) {\\n    \\/**\\n     * http:\\/\\/stackoverflow.com\\/a\\/7753154\\/1246646\\n     *\\/\\n    if (!function_exists(\'http_build_url\')) {\\n        define(\'HTTP_URL_REPLACE\', 1);              \\/\\/ Replace every part of the first URL when there\'s one of the second URL\\n        define(\'HTTP_URL_JOIN_PATH\', 2);            \\/\\/ Join relative paths\\n        define(\'HTTP_URL_JOIN_QUERY\', 4);           \\/\\/ Join query strings\\n        define(\'HTTP_URL_STRIP_USER\', 8);           \\/\\/ Strip any user authentication information\\n        define(\'HTTP_URL_STRIP_PASS\', 16);          \\/\\/ Strip any password authentication information\\n        define(\'HTTP_URL_STRIP_AUTH\', 32);          \\/\\/ Strip any authentication information\\n        define(\'HTTP_URL_STRIP_PORT\', 64);          \\/\\/ Strip explicit port numbers\\n        define(\'HTTP_URL_STRIP_PATH\', 128);         \\/\\/ Strip complete path\\n        define(\'HTTP_URL_STRIP_QUERY\', 256);        \\/\\/ Strip query string\\n        define(\'HTTP_URL_STRIP_FRAGMENT\', 512);     \\/\\/ Strip any fragments (#identifier)\\n        define(\'HTTP_URL_STRIP_ALL\', 1024);         \\/\\/ Strip anything but scheme and host\\n\\n        \\/**\\n         * Build an URL<br>\\n         * The parts of the second URL will be merged into the first according to the flags argument.<br><br>\\n         *\\n         * @param\\tmixed\\t$url\\t(Part(s) of) an URL in form of a string or associative array like parse_url() returns\\n         * @param\\tmixed\\t$parts\\tSame as the first argument\\n         * @param\\tint\\t\\t$flags\\tA bitmask of binary or\'ed HTTP_URL constants (Optional)HTTP_URL_REPLACE is the default\\n         * @param\\tarray\\t$newUrl\\tIf set, it will be filled with the parts of the composed url like parse_url() would return\\n         * @return\\tstring\\t\\t\\tBuilt URL\\n         *\\/\\n        function http_build_url($url, $parts = array(), $flags = HTTP_URL_REPLACE, &$newUrl = false) {\\n            $keys = array(\'user\', \'pass\', \'port\', \'path\', \'query\', \'fragment\');\\n\\n            \\/\\/ HTTP_URL_STRIP_ALL becomes all the HTTP_URL_STRIP_Xs\\n            if ($flags & HTTP_URL_STRIP_ALL) {\\n                $flags |= HTTP_URL_STRIP_USER;\\n                $flags |= HTTP_URL_STRIP_PASS;\\n                $flags |= HTTP_URL_STRIP_PORT;\\n                $flags |= HTTP_URL_STRIP_PATH;\\n                $flags |= HTTP_URL_STRIP_QUERY;\\n                $flags |= HTTP_URL_STRIP_FRAGMENT;\\n            }\\n            \\/\\/ HTTP_URL_STRIP_AUTH becomes HTTP_URL_STRIP_USER and HTTP_URL_STRIP_PASS\\n            else if ($flags & HTTP_URL_STRIP_AUTH) {\\n                $flags |= HTTP_URL_STRIP_USER;\\n                $flags |= HTTP_URL_STRIP_PASS;\\n            }\\n\\n            \\/\\/ Parse the original URL\\n            $parseUrl = parse_url($url);\\n\\n            \\/\\/ Scheme and Host are always replaced\\n            if (isset($parts[\'scheme\']))\\n                $parseUrl[\'scheme\'] = $parts[\'scheme\'];\\n            if (isset($parts[\'host\']))\\n                $parseUrl[\'host\'] = $parts[\'host\'];\\n\\n            \\/\\/ (If applicable) Replace the original URL with it\'s new parts\\n            if ($flags & HTTP_URL_REPLACE) {\\n                foreach ($keys as $key) {\\n                    if (isset($parts[$key]))\\n                        $parseUrl[$key] = $parts[$key];\\n                }\\n            }\\n            else {\\n                \\/\\/ Join the original URL path with the new path\\n                if (isset($parts[\'path\']) && ($flags & HTTP_URL_JOIN_PATH)) {\\n                    if (isset($parseUrl[\'path\']))\\n                        $parseUrl[\'path\'] = rtrim(str_replace(basename($parseUrl[\'path\']), \'\', $parseUrl[\'path\']), \'\\/\') . \'\\/\' . ltrim($parts[\'path\'], \'\\/\');\\n                    else\\n                        $parseUrl[\'path\'] = $parts[\'path\'];\\n                }\\n\\n                \\/\\/ Join the original query string with the new query string\\n                if (isset($parts[\'query\']) && ($flags & HTTP_URL_JOIN_QUERY)) {\\n                    if (isset($parseUrl[\'query\']))\\n                        $parseUrl[\'query\'] .= \'&\' . $parts[\'query\'];\\n                    else\\n                        $parseUrl[\'query\'] = $parts[\'query\'];\\n                }\\n            }\\n\\n            \\/\\/ Strips all the applicable sections of the URL\\n            \\/\\/ Note: Scheme and Host are never stripped\\n            foreach ($keys as $key) {\\n                if ($flags & (int) constant(\'HTTP_URL_STRIP_\' . strtoupper($key)))\\n                    unset($parseUrl[$key]);\\n            }\\n\\n            $newUrl = $parseUrl;\\n\\n            return\\n                    ((isset($parseUrl[\'scheme\'])) ? $parseUrl[\'scheme\'] . \':\\/\\/\' : \'\')\\n                    . ((isset($parseUrl[\'user\'])) ? $parseUrl[\'user\'] . ((isset($parseUrl[\'pass\'])) ? \':\' . $parseUrl[\'pass\'] : \'\') . \'@\' : \'\')\\n                    . ((isset($parseUrl[\'host\'])) ? $parseUrl[\'host\'] : \'\')\\n                    . ((isset($parseUrl[\'port\'])) ? \':\' . $parseUrl[\'port\'] : \'\')\\n                    . ((isset($parseUrl[\'path\'])) ? $parseUrl[\'path\'] : \'\')\\n                    . ((isset($parseUrl[\'query\'])) ? \'?\' . $parseUrl[\'query\'] : \'\')\\n                    . ((isset($parseUrl[\'fragment\'])) ? \'#\' . $parseUrl[\'fragment\'] : \'\')\\n            ;\\n        }\\n\\n    }\\n\\n    parse_str($parseUrl[\'query\'], $queries);\\n    unset($queries[$langKey]);\\n    $parseUrl[\'query\'] = http_build_query($queries);\\n\\n    $pageURL = http_build_url($pageURL, $parseUrl);\\n    $pageURL = urldecode($pageURL);\\n    \\/\\/ replace: &queryarray[0]=foo&queryarray[1]=bar\\n    \\/\\/ to:\\t\\t&queryarray[]=foo&queryarray[]=bar\\n    $pageURL = preg_replace(\'\\/\\\\[+(\\\\d)+\\\\]+\\/\', \'[]\', $pageURL);\\n}\\n\\n$pageURL = rtrim($pageURL, \'?\');\\n$hasQuery = strstr($pageURL, \'?\');\\n\\n$languages = array();\\n$originPageUrl = $pageURL;\\n$requestUri = str_replace(MODX_BASE_URL, \'\', $parseUrl[\'path\']);\\n\\/\\/ $modx->getOption(\'cultureKey\') is overriden by plugin!\\n$modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\n$cultureKey = $modCultureKey->get(\'value\');\\n\\n$baseUrl = $modx->getOption(\'base_url\', $scriptProperties);\\n$baseUrl = str_replace(MODX_BASE_URL, \'\', $baseUrl);\\n$baseUrl = trim($baseUrl, \'\\/\');\\n$originResource = $modx->getObject(\'modResource\', $modx->resource->get(\'id\'));\\n\\nforeach ($collection as $item) {\\n    if ($item->get(\'lang_code\') === $modx->cultureKey) {\\n        continue;\\n    }\\n    $itemArray = $item->toArray($phsPrefix);\\n    $cloneSite = $modx->getObject(\'linguaSiteContent\', array(\\n        \'resource_id\' => $modx->resource->get(\'id\'),\\n        \'lang_id\' => $item->get(\'id\'),\\n    ));\\n    if ($modx->getOption(\'friendly_urls\')) {\\n        $itemUri = \'\';\\n        if ($itemArray[$phsPrefix . \'lang_code\'] === $cultureKey) {\\n            $itemUri = $originResource->get(\'uri\');\\n        } elseif ($cloneSite) {\\n            $itemUri = $cloneSite->get(\'uri\');\\n        }\\n        \\n        if (!empty($itemUri)) {\\n            $matches = null;\\n            preg_match(\'\\/(\\\\\\/)*$\\/\', $itemUri, $matches);\\n            $search = $requestUri . (!empty($matches[0]) ? $matches[1] : \'\');\\n            $replace = (!empty($baseUrl) ? $baseUrl . \'\\/\' : \'\') . $itemUri;\\n            $pageURL = str_replace($search, $replace, $originPageUrl);\\n        }\\n    }\\n\\n    $itemArray[$phsPrefix . \'url\'] = $pageURL . (!empty($hasQuery) ? \'&\' : \'?\') . $langKey . \'=\' . $itemArray[$phsPrefix . $codeField];\\n\\/\\/    $itemArray[$phsPrefix . \'url\'] = $pageURL;\\n\\n    if (!empty($toArray)) {\\n        $languages[] = $itemArray;\\n    } else {\\n        $languages[] = $lingua->parseTpl($tplItem, $itemArray);\\n    }\\n}\\n\\nif (!empty($toArray)) {\\n    $wrapper = array(\\n        $phsPrefix . \'languages\' => $languages\\n    );\\n    $output = \'<pre>\' . print_r($wrapper, TRUE) . \'<\\/pre>\';\\n} else {\\n    $selection = @implode(\\"\\\\n\\", $languages);\\n    $wrapper = array($phsPrefix . \'languages\' => $selection);\\n    $output = $lingua->parseTpl($tplWrapper, $wrapper);\\n}\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return;\\n}\\nreturn $output;"}',
        'guid' => '634960f48ac3d2ab24664af59bd8bcdb',
        'native_key' => 0,
        'signature' => 'd76afccfcad68cf831b80dd09a96db58',
      ),
      'f627051e53013b05fb259fbf07e34276' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"lingua.cultureKey","description":"Helper snippet to get the run time cultureKey, which is set by lingua\'s plugin.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_culture_key\\r\\n *\\/\\r\\n\\r\\nreturn $modx->cultureKey;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_culture_key\\r\\n *\\/\\r\\n\\r\\nreturn $modx->cultureKey;"}',
        'guid' => 'b1186053e422e4d4a2cb8b9a2c7d3155',
        'native_key' => 0,
        'signature' => 'b725902b2bc798508eec0866a0a96efd',
      ),
      '7124df03e7b6ee51c950732d8acfed53' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"lingua.getField","description":"Get the value of the given field for the run time culture key.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_getfield\\r\\n *\\/\\r\\n\\r\\n$field = $modx->getOption(\'field\', $scriptProperties);\\r\\nif (empty($field)) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$langCodeField = $modx->getOption(\'codeField\', $scriptProperties, $modx->getOption(\'lingua.code_field\', null, \'lang_code\'));\\r\\n$defaultLinguaCorePath = $modx->getOption(\'core_path\') . \'components\\/lingua\\/\';\\r\\n$linguaCorePath = $modx->getOption(\'lingua.core_path\', null, $defaultLinguaCorePath);\\r\\n$lingua = $modx->getService(\'lingua\', \'Lingua\', $linguaCorePath . \'model\\/lingua\\/\', $scriptProperties);\\r\\n\\r\\nif (!($lingua instanceof Lingua)) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$langObj = $modx->getObject(\'linguaLangs\', array(\\r\\n    $langCodeField => $modx->cultureKey\\r\\n));\\r\\nif (!$langObj) {\\r\\n    return;\\r\\n}\\r\\n$output = $langObj->get($field);\\r\\nif (!$output) {\\r\\n    return;\\r\\n}\\r\\nreturn $output;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_getfield\\r\\n *\\/\\r\\n\\r\\n$field = $modx->getOption(\'field\', $scriptProperties);\\r\\nif (empty($field)) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$langCodeField = $modx->getOption(\'codeField\', $scriptProperties, $modx->getOption(\'lingua.code_field\', null, \'lang_code\'));\\r\\n$defaultLinguaCorePath = $modx->getOption(\'core_path\') . \'components\\/lingua\\/\';\\r\\n$linguaCorePath = $modx->getOption(\'lingua.core_path\', null, $defaultLinguaCorePath);\\r\\n$lingua = $modx->getService(\'lingua\', \'Lingua\', $linguaCorePath . \'model\\/lingua\\/\', $scriptProperties);\\r\\n\\r\\nif (!($lingua instanceof Lingua)) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$langObj = $modx->getObject(\'linguaLangs\', array(\\r\\n    $langCodeField => $modx->cultureKey\\r\\n));\\r\\nif (!$langObj) {\\r\\n    return;\\r\\n}\\r\\n$output = $langObj->get($field);\\r\\nif (!$output) {\\r\\n    return;\\r\\n}\\r\\nreturn $output;"}',
        'guid' => '77a2fb2e21c6856218a864ce680f3557',
        'native_key' => 0,
        'signature' => '65d438d94a363e1b760fe10ccb66c7e0',
      ),
      '9d5ae70b09f6d03ebc6df0cf1f784bc9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"lingua.getValue","description":"Get the value of the clone\'s field for the run time culture key.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_getfield\\r\\n *\\/\\r\\n\\r\\n$field = $modx->getOption(\'field\', $scriptProperties);\\r\\nif (empty($field)) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\r\\n$defaultLinguaCorePath = $modx->getOption(\'core_path\') . \'components\\/lingua\\/\';\\r\\n$linguaCorePath = $modx->getOption(\'lingua.core_path\', null, $defaultLinguaCorePath);\\r\\n$lingua = $modx->getService(\'lingua\', \'Lingua\', $linguaCorePath . \'model\\/lingua\\/\', $scriptProperties);\\r\\n$debug = $modx->getOption(\'lingua.debug\');\\r\\nif (!($lingua instanceof Lingua)) {\\r\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[lingua.getValue]: !($lingua instanceof Lingua)\');\\r\\n    return;\\r\\n}\\r\\n\\r\\n$langObj = $modx->getObject(\'linguaLangs\', array(\\r\\n    \'lang_code\' => $modx->cultureKey\\r\\n));\\r\\nif (!$langObj) {\\r\\n    if ($debug) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR, \'[lingua.getValue]: Missing field\\\\\'s value for \' . $field . \' in \' . $modx->cultureKey);\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n$c = $modx->newQuery(\'linguaSiteContent\');\\r\\n$c->where(array(\\r\\n    \'resource_id\' => $id,\\r\\n    \'lang_id\' => $langObj->get(\'id\'),\\r\\n));\\r\\n$linguaSiteContent = $modx->getObject(\'linguaSiteContent\', $c);\\r\\n$resource = $modx->getObject(\'modResource\', $id);\\r\\nif (!$resource) {\\r\\n    if ($debug) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR, \'[lingua.getValue]: Missing resource for \' . $field . \' in \' . $modx->cultureKey);\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n     \\r\\n$tableFields = array(\'pagetitle\', \'longtitle\', \'description\', \'alias\',\\r\\n    \'link_attributes\', \'introtext\', \'content\', \'menutitle\', \'uri\', \'uri_override\',\\r\\n    \'properties\');\\r\\n$output = \'\';\\r\\nif (in_array($field, $tableFields)) {\\r\\n    if ($linguaSiteContent) {\\r\\n        $output = $linguaSiteContent->get($field);\\r\\n    }\\r\\n}\\r\\n\\/\\/ try TV\\r\\nelse {\\r\\n    $tv = $modx->getObject(\'modTemplateVar\', array(\\r\\n        \'name\' => $field,\\r\\n    ));\\r\\n    if ($tv) {\\r\\n        $linguaSiteTmplvarContentvalues = $modx->getObject(\'linguaSiteTmplvarContentvalues\', array(\\r\\n            \'lang_id\' => $langObj->get(\'id\'),\\r\\n            \'tmplvarid\' => $tv->get(\'id\'),\\r\\n            \'contentid\' => $id,\\r\\n        ));\\r\\n        if ($linguaSiteTmplvarContentvalues) {\\r\\n            $value = $linguaSiteTmplvarContentvalues->get(\'value\');\\r\\n            $tv->setValue($tv->get(\'id\'), $value);\\r\\n        }\\r\\n        $output = $tv->renderOutput($resource->get(\'id\'));\\r\\n    }\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_getfield\\r\\n *\\/\\r\\n\\r\\n$field = $modx->getOption(\'field\', $scriptProperties);\\r\\nif (empty($field)) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\r\\n$defaultLinguaCorePath = $modx->getOption(\'core_path\') . \'components\\/lingua\\/\';\\r\\n$linguaCorePath = $modx->getOption(\'lingua.core_path\', null, $defaultLinguaCorePath);\\r\\n$lingua = $modx->getService(\'lingua\', \'Lingua\', $linguaCorePath . \'model\\/lingua\\/\', $scriptProperties);\\r\\n$debug = $modx->getOption(\'lingua.debug\');\\r\\nif (!($lingua instanceof Lingua)) {\\r\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[lingua.getValue]: !($lingua instanceof Lingua)\');\\r\\n    return;\\r\\n}\\r\\n\\r\\n$langObj = $modx->getObject(\'linguaLangs\', array(\\r\\n    \'lang_code\' => $modx->cultureKey\\r\\n));\\r\\nif (!$langObj) {\\r\\n    if ($debug) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR, \'[lingua.getValue]: Missing field\\\\\'s value for \' . $field . \' in \' . $modx->cultureKey);\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n$c = $modx->newQuery(\'linguaSiteContent\');\\r\\n$c->where(array(\\r\\n    \'resource_id\' => $id,\\r\\n    \'lang_id\' => $langObj->get(\'id\'),\\r\\n));\\r\\n$linguaSiteContent = $modx->getObject(\'linguaSiteContent\', $c);\\r\\n$resource = $modx->getObject(\'modResource\', $id);\\r\\nif (!$resource) {\\r\\n    if ($debug) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR, \'[lingua.getValue]: Missing resource for \' . $field . \' in \' . $modx->cultureKey);\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n     \\r\\n$tableFields = array(\'pagetitle\', \'longtitle\', \'description\', \'alias\',\\r\\n    \'link_attributes\', \'introtext\', \'content\', \'menutitle\', \'uri\', \'uri_override\',\\r\\n    \'properties\');\\r\\n$output = \'\';\\r\\nif (in_array($field, $tableFields)) {\\r\\n    if ($linguaSiteContent) {\\r\\n        $output = $linguaSiteContent->get($field);\\r\\n    }\\r\\n}\\r\\n\\/\\/ try TV\\r\\nelse {\\r\\n    $tv = $modx->getObject(\'modTemplateVar\', array(\\r\\n        \'name\' => $field,\\r\\n    ));\\r\\n    if ($tv) {\\r\\n        $linguaSiteTmplvarContentvalues = $modx->getObject(\'linguaSiteTmplvarContentvalues\', array(\\r\\n            \'lang_id\' => $langObj->get(\'id\'),\\r\\n            \'tmplvarid\' => $tv->get(\'id\'),\\r\\n            \'contentid\' => $id,\\r\\n        ));\\r\\n        if ($linguaSiteTmplvarContentvalues) {\\r\\n            $value = $linguaSiteTmplvarContentvalues->get(\'value\');\\r\\n            $tv->setValue($tv->get(\'id\'), $value);\\r\\n        }\\r\\n        $output = $tv->renderOutput($resource->get(\'id\'));\\r\\n    }\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => '34dc4700a2b39a329e1b817a4fc99977',
        'native_key' => 0,
        'signature' => 'f39f6b0d3c6ffd1d3217c0d7eaa6a514',
      ),
    ),
    'Plugins' => 
    array (
      'bbb5dcc22a67ec36f8cdb764d5669de4' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":0,"source":0,"property_preprocess":1,"name":"Lingua","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"header(\'Content-Type: text\\/html; charset=utf-8\');\\r\\n\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_plugin\\r\\n *\\/\\r\\n$event = $modx->event->name;\\r\\nswitch ($event) {\\r\\n    case \'OnHandleRequest\': \\/\\/ for global\\r\\n        break;\\r\\n\\r\\n    case \'OnInitCulture\':   \\/\\/ for request class\\r\\n        if ($modx->context->key === \'mgr\') {\\r\\n            return;\\r\\n        }\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n        $modx->lexicon->load(\'lingua:default\');\\r\\n        $langGetKey = $modx->getOption(\'lingua.request_key\', $scriptProperties, \'lang\');\\r\\n        $langGetKeyValue = filter_input(INPUT_GET, $langGetKey, FILTER_SANITIZE_STRING);\\r\\n        $langGetKeyValue = strtolower($langGetKeyValue);\\r\\n        $langCookieValue = filter_input(INPUT_COOKIE, \'modx_lingua_switcher\', FILTER_SANITIZE_STRING);\\r\\n        $langCookieValue = strtolower($langCookieValue);\\r\\n        if (!empty($langGetKeyValue) &&\\r\\n                $langGetKeyValue !== $modx->cultureKey &&\\r\\n                strlen($langGetKeyValue) === 2\\r\\n        ) {\\r\\n            $lingua->setCultureKey($langGetKeyValue);\\r\\n        } else if (!empty($langCookieValue) &&\\r\\n                $langCookieValue !== $modx->cultureKey &&\\r\\n                strlen($langCookieValue) === 2\\r\\n        ) {\\r\\n            $lingua->setCultureKey($langCookieValue);\\r\\n        } else if(empty($langGetKeyValue) &&\\r\\n                empty($langCookieValue)\\r\\n        ){\\r\\n            $detectBrowser = $modx->getOption(\'lingua.detect_browser\');\\r\\n            if ($detectBrowser === \'1\') {\\r\\n                $languages = explode(\',\', filter_input(INPUT_SERVER, \'HTTP_ACCEPT_LANGUAGE\', FILTER_SANITIZE_STRING));\\r\\n                $sortedLangs = array();\\r\\n                foreach ($languages as $language) {\\r\\n                    $language = strtolower($language);\\r\\n                    $parts = @explode(\';\', $language);\\r\\n                    if (!isset($parts[1])) {\\r\\n                        $sort = 1.0;\\r\\n                    } else {\\r\\n                        $x = @explode(\'=\', $parts[1]);\\r\\n                        $sort = $x[1] - 0;\\r\\n                    }\\r\\n                    $sortedLangs[$parts[0]] = $sort;\\r\\n                }\\r\\n                arsort($sortedLangs);\\r\\n                $langs = array_keys($sortedLangs);\\r\\n                $linguaLangs = $modx->getCollection(\'linguaLangs\', array(\\r\\n                    \'active\' => 1\\r\\n                ));\\r\\n                $c = $modx->newQuery(\'linguaLangs\');\\r\\n                $c->where(\'active=1\');\\r\\n                $contextLangs = $modx->context->config[\'lingua.langs\'];\\r\\n                if (!empty($contextLangs)) {\\r\\n                    $contextLangs = array_map(\'trim\', @explode(\',\', $contextLangs));\\r\\n                    $c->where(array(\\r\\n                        \'lang_code:IN\' => $contextLangs\\r\\n                    ));\\r\\n                }\\r\\n                $linguaLangs = $modx->getCollection(\'linguaLangs\', $c);\\r\\n                $existingLangs = array();\\r\\n                if ($linguaLangs) {\\r\\n                    foreach ($linguaLangs as $linguaLang) {\\r\\n                        $existingLangs[] = $linguaLang->get(\'lang_code\');\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                $acceptedLangs = array_intersect($existingLangs, $langs);\\r\\n                $acceptedLangs = array_values($acceptedLangs); \\/\\/ reset index\\r\\n\\r\\n                if (!empty($acceptedLangs) && is_array($acceptedLangs)) {\\r\\n                    $lingua->setCultureKey($acceptedLangs[0]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        $modx->cultureKey = $lingua->getCultureKey();\\r\\n        if ($modx->cultureKey !== $modx->getOption(\'cultureKey\')) {\\r\\n            $modx->setOption(\'cultureKey\', $modx->cultureKey);\\r\\n            $modx->context->config[\'cultureKey\'] = $modx->cultureKey;\\r\\n        }\\r\\n        $modx->setPlaceholder(\'lingua.cultureKey\', $modx->cultureKey);\\r\\n        $modx->setPlaceholder(\'lingua.language\', $modx->cultureKey);\\r\\n        \\r\\n        break;\\r\\n\\r\\n    \\/**\\r\\n     * \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ MANAGER SIDE \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n     *\\/\\r\\n    case \'OnDocFormPrerender\':\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            if ($resource) {\\r\\n                $currentContext = $resource->get(\'context_key\');\\r\\n            } else {\\r\\n                $currentContext = filter_input(INPUT_GET, \'context_key\', FILTER_SANITIZE_STRING);\\r\\n            }\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            if ($resource) {\\r\\n                $currentParent = $resource->get(\'parent\');\\r\\n            } else {\\r\\n                $currentParent = filter_input(INPUT_GET, \'parent\', FILTER_SANITIZE_NUMBER_INT);\\r\\n            }\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        if (is_object($resource)) {\\r\\n            $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n            if (!empty($ids)) {\\r\\n                $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n                $currentId = $resource->get(\'id\');\\r\\n                if (!in_array($currentId, $ids)) {\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        $modx->lexicon->load(\'lingua:default\');\\r\\n        $languages = $lingua->getLanguages();\\r\\n        if (empty($languages)) {\\r\\n            return;\\r\\n        }\\r\\n        $modx->regClientCSS(MODX_BASE_URL . \'assets\\/components\\/lingua\\/css\\/mgr.css\');\\r\\n        $modx->controller->addJavascript(MODX_BASE_URL . \'assets\\/components\\/lingua\\/js\\/mgr\\/resource.js\');\\r\\n        \\/\\/ $modx->getOption(\'cultureKey\') doesn\'t work!\\r\\n        $modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\r\\n        $cultureKey = $modCultureKey->get(\'value\');\\r\\n        $storeData = array();\\r\\n        $storeDefaultData = array();\\r\\n        $configLang = array();\\r\\n        $linguaSiteContentArray = array();\\r\\n        $createHiddenFields = array();\\r\\n        foreach ($languages as $language) {\\r\\n            $configLang[$language[\'lang_code\']] = array(\\r\\n                \'lang_code\' => $language[\'lang_code\'],\\r\\n                \'local_name\' => $language[\'local_name\'],\\r\\n                \'flag\' => $language[\'flag\'],\\r\\n            );\\r\\n            if ($language[\'lang_code\'] === $cultureKey) {\\r\\n                $storeDefaultData[] = array(\\r\\n                    $language[\'lang_code\'],\\r\\n                    $language[\'local_name\'],\\r\\n                    $language[\'flag\'],\\r\\n                );\\r\\n                continue;\\r\\n            }\\r\\n            $storeData[] = array(\\r\\n                $language[\'lang_code\'],\\r\\n                $language[\'local_name\'],\\r\\n                $language[\'flag\'],\\r\\n            );\\r\\n            if ($mode === modSystemEvent::MODE_UPD) {\\r\\n                $linguaSiteContent = $modx->getObject(\'linguaSiteContent\', array(\\r\\n                    \'resource_id\' => $resource->get(\'id\'),\\r\\n                    \'lang_id\' => $language[\'id\']\\r\\n                ));\\r\\n                if ($linguaSiteContent) {\\r\\n                    $linguaSiteContentArray[$language[\'lang_code\']] = $linguaSiteContent->toArray();\\r\\n                } else {\\r\\n                    $linguaSiteContentArray[$language[\'lang_code\']] = array();\\r\\n                }\\r\\n            } else {\\r\\n                $linguaSiteContentArray[$language[\'lang_code\']] = array();\\r\\n            }\\r\\n            $modx->regClientStartupHTMLBlock(\'<style>.icon-lingua-flag-\' . $language[\'lcid_string\'] . \' {background-image: url(\\\\\'..\\/\' . $language[\'flag\'] . \'\\\\\'); background-repeat: no-repeat;}<\\/style>\');\\r\\n            $createHiddenFields[] = $language;\\r\\n        } \\/\\/ foreach ($languages as $language)\\r\\n        \\/\\/------------------------------------------------------------------\\r\\n        $jsHTML = \'\\r\\n    window.lingua = new Lingua({\\r\\n        defaultLang: \\"\' . $cultureKey . \'\\",\\r\\n        langs: \' . json_encode($configLang) . \'\\r\\n    });\\r\\n    lingua.config.siteContent = \' . json_encode($linguaSiteContentArray) . \';\\r\\n    lingua.flagDefaultFields();\\r\\n    lingua.createHiddenFields(\' . json_encode($createHiddenFields) . \');\\r\\n    var actionButtons = Ext.getCmp(\\"modx-action-buttons\\");\\r\\n    if (actionButtons) {\\r\\n        var languageBtn = new Ext.form.ComboBox({\\r\\n            id: \\"lingua-languageBtn\\",\\r\\n            tpl: \\\\\'<tpl for=\\".\\"><div class=\\"x-combo-list-item\\"><img src=\\"..\\/{flag}\\" class=\\"icon\\"\\/> {local_name}<\\/div><\\/tpl>\\\\\',\\r\\n            store: new Ext.data.ArrayStore({\\r\\n                id: 0,\\r\\n                fields: [\\r\\n                    \\"lang_code\\",\\r\\n                    \\"local_name\\",\\r\\n                    \\"flag\\"\\r\\n                ],\\r\\n                data: \' . json_encode(array_merge($storeDefaultData, $storeData)) . \'\\r\\n            }),\\r\\n            valueField: \\"lang_code\\",\\r\\n            displayField: \\"local_name\\",\\r\\n            typeAhead: false,\\r\\n            forceSelection: true,\\r\\n            editable: false,\\r\\n            mode: \\"local\\",\\r\\n            triggerAction: \\"all\\",\\r\\n            \\/\\/emptyText: \\"\' . $languages[$cultureKey][\'local_name\'] . \'\\",\\r\\n            selectOnFocus: true,\\r\\n            width: 150,\\r\\n            listeners: {\\r\\n                select: {\\r\\n                    fn: function(combo, record, index) {\\r\\n                        lingua.switchLanguage(record.get(\\"lang_code\\"));\\r\\n                    },\\r\\n                    scope: this\\r\\n                },\\r\\n                render: {\\r\\n                    fn: function(comboBox) {\\r\\n                        var store = comboBox.store;\\r\\n                        var valueField = comboBox.valueField;\\r\\n                        var displayField = comboBox.displayField;\\r\\n                        var recordNumber = store.findExact(valueField, \\"\' . $cultureKey . \'\\", 0);\\r\\n                        if (recordNumber !== -1) {\\r\\n                            var displayValue = store.getAt(recordNumber).data[displayField];\\r\\n                            comboBox.setValue(\\"\' . $cultureKey . \'\\");\\r\\n                            comboBox.setRawValue(displayValue);\\r\\n                            comboBox.selectedIndex = recordNumber;\\r\\n                        }\\r\\n                    },\\r\\n                    scope: this\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n        actionButtons.insertButton(0, [languageBtn, \\"-\\"]);\\r\\n        actionButtons.doLayout();\\r\\n    }\';\\r\\n        $modx->controller->addHtml(\'\\r\\n<script type=\\"text\\/javascript\\">\\r\\nExt.onReady(function() {\\r\\n    \' . $jsHTML . \'\\r\\n});\\r\\n<\\/script>\');\\r\\n        \\/\\/------------------------------------------------------------------\\r\\n        break;\\r\\n\\r\\n    case \'OnResourceTVFormRender\':\\r\\n        if (!is_object($resource) && is_numeric($resource)) {\\r\\n            $resourceId = $resource;\\r\\n            $resource = $modx->getObject(\'modResource\', $resource);\\r\\n        }\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            if ($resource) {\\r\\n                $currentContext = $resource->get(\'context_key\');\\r\\n            } else {\\r\\n                $currentContext = filter_input(INPUT_GET, \'context_key\', FILTER_SANITIZE_STRING);\\r\\n            }\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            if ($resource) {\\r\\n                $currentParent = $resource->get(\'parent\');\\r\\n            } else {\\r\\n                $currentParent = filter_input(INPUT_GET, \'parent\', FILTER_SANITIZE_NUMBER_INT);\\r\\n            }\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        if (is_object($resource)) {\\r\\n            $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n            if (!empty($ids)) {\\r\\n                $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n                $currentId = $resource->get(\'id\');\\r\\n                if (!in_array($currentId, $ids)) {\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n        $languages = $lingua->getLanguages(1, false);\\r\\n        if (empty($languages)) {\\r\\n            return;\\r\\n        }\\r\\n        $initAllClonedTVFields = array();\\r\\n        foreach ($languages as $language) {\\r\\n            $initAllClonedTVFields[] = $language;\\r\\n        }\\r\\n\\r\\n        if ($resource) {\\r\\n            $tvs = $resource->getTemplateVars();\\r\\n        } else {\\r\\n            $templateId = $template;\\r\\n            $template = $modx->getObject(\'modTemplate\', $templateId);\\r\\n            $tvs = $template->getTemplateVars();\\r\\n        }\\r\\n        if (!$tvs) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        $tvIds = array();\\r\\n        $tvOutputs = array();\\r\\n        foreach ($tvs as $tv) {\\r\\n            $tvIds[] = $tv->get(\'id\');\\r\\n        }\\r\\n        $c = $modx->newQuery(\'linguaSiteTmplvars\');\\r\\n        $c->where(array(\\r\\n            \'tmplvarid:IN\' => $tvIds\\r\\n        ));\\r\\n        $linguaSiteTmplvars = $modx->getCollection(\'linguaSiteTmplvars\', $c);\\r\\n        if (!$linguaSiteTmplvars) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        $formElements = array();\\r\\n        foreach ($scriptProperties[\'categories\'] as $category) {\\r\\n            foreach ($category[\'tvs\'] as $tv) {\\r\\n                $formElements[$tv->get(\'id\')] = $tv;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!empty($modx->controller->scriptProperties[\'showCheckbox\'])) {\\r\\n            $showCheckbox = 1;\\r\\n        }\\r\\n\\r\\n        $tmplvars = array();\\r\\n        $cloneTVFields = array();\\r\\n        $count = 0;\\r\\n        \\/\\/ $modx->getOption(\'cultureKey\') doesn\'t work!\\r\\n        $modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\r\\n        $cultureKey = $modCultureKey->get(\'value\');\\r\\n        foreach ($linguaSiteTmplvars as $linguaTv) {\\r\\n            $tvId = $linguaTv->get(\'tmplvarid\');\\r\\n            if (!isset($formElements[$tvId])) {\\r\\n                continue;\\r\\n            }\\r\\n            $tv = $formElements[$tvId];\\r\\n            $tmplvars[] = array(\\r\\n                \'id\' => $tvId,\\r\\n                \'type\' => $tv->get(\'type\'),\\r\\n            );\\r\\n            $tvArray = $tv->toArray(\'tv.\');\\r\\n            foreach ($languages as $language) {\\r\\n                if ($language[\'lang_code\'] === $cultureKey) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                $linguaTVContent = $modx->getObject(\'linguaSiteTmplvarContentvalues\', array(\\r\\n                    \'tmplvarid\' => $tvId,\\r\\n                    \'contentid\' => $resourceId,\\r\\n                    \'lang_id\' => $language[\'id\']\\r\\n                ));\\r\\n\\r\\n                \\/**\\r\\n                 * Start to manipulate the ID to parse hidden TVs\\r\\n                 *\\/\\r\\n                $content = \'\';\\r\\n                if ($linguaTVContent) {\\r\\n                    $content = $linguaTVContent->get(\'value\');\\r\\n                }\\r\\n                $inputForm = $tv->renderInput($resource, array(\\r\\n                    \'value\' => $content\\r\\n                ));\\r\\n                if (empty($inputForm)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                $tvCloneId = $tvId . \'_\' . $language[\'lang_code\'] . \'_lingua_tv\';\\r\\n                \\/\\/ basic replacements\\r\\n                $cloneInputForm = $inputForm;\\r\\n                $cloneInputForm = preg_replace(\'\\/(\\"|\\\\\'){1}tv\' . $tvId . \'(\\"|\\\\\'){1}\\/\', \'${1}tv\' . $tvCloneId . \'${2}\', $cloneInputForm);\\r\\n                $cloneInputForm = preg_replace(\'\\/(\\"|\\\\\'){1}tv\' . $tvId . \'\\\\[\\\\](\\"|\\\\\'){1}\\/\', \'${1}tv\' . $tvCloneId . \'[]${2}\', $cloneInputForm);\\r\\n                \\/\\/ advanced replacements\\r\\n                $linguaSiteTmplvarsPatterns = $modx->getCollection(\'linguaSiteTmplvarsPatterns\', array(\\r\\n                    \'type\' => $tv->get(\'type\')\\r\\n                ));\\r\\n                if ($linguaSiteTmplvarsPatterns) {\\r\\n                    foreach ($linguaSiteTmplvarsPatterns as $pattern) {\\r\\n                        $search = $pattern->get(\'search\');\\r\\n                        $search = str_replace(\'{{tvId}}\', $tvId, $search);\\r\\n                        $replacement = $pattern->get(\'replacement\');\\r\\n                        $replacement = str_replace(\'{{tvCloneId}}\', $tvCloneId, $replacement);\\r\\n                        $cloneInputForm = preg_replace($search, $replacement, $cloneInputForm);\\r\\n                    }\\r\\n                }\\r\\n                $count++;\\r\\n                $phs = $tvArray;\\r\\n                $phs[\'tv.id\'] = $tvCloneId;\\r\\n                $phs[\'tv.formElement\'] = $cloneInputForm;\\r\\n                $phs[\'tv.showCheckbox\'] = $showCheckbox;\\r\\n                $cloneTVFields[] = $lingua->processElementTags($lingua->parseTpl(\'lingua.resourcetv.row\', $phs));\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/\\/ reset any left out output after rendering TV forms above\\r\\n        if ($modx->event->name === \'OnTVInputRenderList\') {\\r\\n            $modx->event->_output = \'\';\\r\\n        }\\r\\n\\r\\n        $modx->event->output(@implode(\\"\\\\n\\", $cloneTVFields));    \\r\\n        $jsHTML = \\"\\r\\n<script>\\r\\n    Ext.onReady(function() {\\r\\n        lingua.config.tmplvars = \\" . json_encode($tmplvars) . \\";\\r\\n        lingua.initAllClonedTVFields(\\" . json_encode($initAllClonedTVFields) . \\");\\r\\n        lingua.flagDefaultTVFields();\\r\\n    });\\r\\n<\\/script>\\";\\r\\n        $modx->event->output($jsHTML);\\r\\n\\r\\n        break;\\r\\n\\r\\n    case \'OnDocFormSave\':\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            $currentContext = $resource->get(\'context_key\');\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            $currentParent = $resource->get(\'parent\');\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n        if (!empty($ids)) {\\r\\n            $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n            $currentId = $resource->get(\'id\');\\r\\n            if (!in_array($currentId, $ids)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        \\/\\/ update linguaSiteContent\\r\\n        $reverting = array();\\r\\n        $clearKeys = array();\\r\\n        \\/\\/ $modx->getOption(\'cultureKey\') doesn\'t work!\\r\\n        $modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\r\\n        $cultureKey = $modCultureKey->get(\'value\');\\r\\n        foreach ($resource->_fields as $k => $v) {\\r\\n            if (!preg_match(\'\\/_lingua$\\/\', $k)) {\\r\\n                continue;\\r\\n            }\\r\\n            foreach ($v as $a => $b) {\\r\\n                if ($a === $cultureKey) {\\r\\n                    continue;\\r\\n                }\\r\\n                $reverting[$a][preg_replace(\'\\/_lingua$\\/\', \'\', $k)] = $b;\\r\\n            }\\r\\n            $clearKeys[] = $k;\\r\\n        }\\r\\n\\r\\n        $resourceId = $resource->get(\'id\');\\r\\n        foreach ($reverting as $k => $v) {\\r\\n            $linguaLangs = $modx->getObject(\'linguaLangs\', array(\'lang_code\' => $k));\\r\\n            $params = array(\\r\\n                \'resource_id\' => $resourceId,\\r\\n                \'lang_id\' => $linguaLangs->get(\'id\'),\\r\\n            );\\r\\n            $linguaSiteContent = $modx->getObject(\'linguaSiteContent\', $params);\\r\\n            if (!$linguaSiteContent) {\\r\\n                $linguaSiteContent = $modx->newObject(\'linguaSiteContent\');\\r\\n                $linguaSiteContent->fromArray($params);\\r\\n                $linguaSiteContent->save();\\r\\n            }\\r\\n            $linguaSiteContent->set(\'pagetitle\', $v[\'pagetitle\']);\\r\\n            $linguaSiteContent->set(\'longtitle\', $v[\'longtitle\']);\\r\\n            $linguaSiteContent->set(\'description\', $v[\'description\']);\\r\\n            $linguaSiteContent->set(\'content\', (isset($v[\'content\']) && !empty($v[\'content\']) ? $v[\'content\'] : $v[\'ta\']));\\r\\n            if (empty($v[\'alias\'])) {\\r\\n                $v[\'alias\'] = $resource->get(\'alias\');\\r\\n                $linguaSiteContent->setDirty(\'alias\');\\r\\n            }\\r\\n            $linguaSiteContent->set(\'introtext\', $v[\'introtext\']);\\r\\n            $linguaSiteContent->set(\'alias\', $v[\'alias\']);\\r\\n            $linguaSiteContent->set(\'menutitle\', $v[\'menutitle\']);\\r\\n            $linguaSiteContent->set(\'link_attributes\', $v[\'link_attributes\']);\\r\\n            $linguaSiteContent->set(\'uri_override\', $v[\'uri_override\']);\\r\\n            $linguaSiteContent->set(\'uri\', $v[\'uri\']);\\r\\n            $linguaSiteContent->set(\'parent\', $resource->get(\'parent\'));\\r\\n            $linguaSiteContent->set(\'isfolder\', $resource->get(\'isfolder\'));\\r\\n            $linguaSiteContent->set(\'context_key\', $resource->get(\'context_key\'));\\r\\n            $linguaSiteContent->set(\'content_type\', $resource->get(\'content_type\'));\\r\\n            if ($resource->get(\'refreshURIs\')) {\\r\\n                $linguaSiteContent->set(\'refreshURIs\', true);\\r\\n            }\\r\\n            $linguaSiteContent->save();\\r\\n        }\\r\\n\\r\\n        \\/\\/ update linguaSiteTmplvarContentvalues\\r\\n        $reverting = array();\\r\\n        foreach ($resource->_fields as $k => $value) {\\r\\n            if (!preg_match(\'\\/_lingua_tv$\\/\', $k)) {\\r\\n                continue;\\r\\n            }\\r\\n            $tvKey = preg_replace(\'\\/_lingua_tv$\\/\', \'\', $k);\\r\\n            $tvKeys = @explode(\'_\', $tvKey);\\r\\n            $tvId = str_replace(\'tv\', \'\', $tvKeys[0]);\\r\\n            if (!is_numeric($tvId)) {\\r\\n                continue;\\r\\n            }\\r\\n            $reverse = array_reverse($tvKeys);\\r\\n            $lang = $reverse[0];\\r\\n            if ($lang === $cultureKey) {\\r\\n                continue;\\r\\n            }\\r\\n            $tv = $modx->getObject(\'modTemplateVar\', $tvId);\\r\\n            $tvKey = $tvKeys[0];\\r\\n            \\/* validation for different types *\\/\\r\\n            switch ($tv->get(\'type\')) {\\r\\n                case \'url\':\\r\\n                    \\/\\/ tv16_prefix_id_lingua_tv\\r\\n                    $prefix = $resource->_fields[$tvKey . \'_prefix_\' . $lang . \'_lingua_tv\'];\\r\\n                    if ($prefix != \'--\') {\\r\\n                        $value = str_replace(array(\'ftp:\\/\\/\', \'http:\\/\\/\', \'https:\\/\\/\', \'ftp:\\/\\/\', \'mailto:\'), \'\', $value);\\r\\n                        $value = $prefix . $value;\\r\\n                    }\\r\\n                    $reverting[$lang][$tvId] = $value;\\r\\n\\r\\n                    break;\\r\\n                case \'date\':\\r\\n                    $value = empty($value) ? \'\' : strftime(\'%Y-%m-%d %H:%M:%S\', strtotime($value));\\r\\n\\r\\n                    break;\\r\\n                \\/* ensure tag types trim whitespace from tags *\\/\\r\\n                case \'tag\':\\r\\n                case \'autotag\':\\r\\n                    $tags = explode(\',\', $value);\\r\\n                    $newTags = array();\\r\\n                    foreach ($tags as $tag) {\\r\\n                        $newTags[] = trim($tag);\\r\\n                    }\\r\\n                    $value = implode(\',\', $newTags);\\r\\n\\r\\n                    break;\\r\\n                default:\\r\\n                    \\/* handles checkboxes & multiple selects elements *\\/\\r\\n                    if (is_array($value)) {\\r\\n                        $featureInsert = array();\\r\\n                        while (list($featureValue, $featureItem) = each($value)) {\\r\\n                            if (empty($featureItem)) {\\r\\n                                continue;\\r\\n                            }\\r\\n                            $featureInsert[count($featureInsert)] = $featureItem;\\r\\n                        }\\r\\n                        $value = implode(\'||\', $featureInsert);\\r\\n                    }\\r\\n\\r\\n                    break;\\r\\n            }\\r\\n            $reverting[$lang][$tvId] = $value;\\r\\n            $clearKeys[] = $k;\\r\\n        }\\r\\n\\r\\n        \\/**\\r\\n         * json seems to have number of characters limit;\\r\\n         * that makes saving success report truncated and output modal hangs,\\r\\n         * TV\'s procces does this outside of reverting\'s loops\\r\\n         *\\/\\r\\n        if (!empty($clearKeys)) {\\r\\n            foreach ($clearKeys as $k) {\\r\\n                $resource->set($k, \'\');\\r\\n            }\\r\\n        }\\r\\n\\r\\n        foreach ($reverting as $k => $tmplvars) {\\r\\n            $linguaLangs = $modx->getObject(\'linguaLangs\', array(\'lang_code\' => $k));\\r\\n            $langId = $linguaLangs->get(\'id\');\\r\\n            foreach ($tmplvars as $key => $val) {\\r\\n                if (empty($val)) {\\r\\n                    continue;\\r\\n                }\\r\\n                $params = array(\\r\\n                    \'lang_id\' => $langId,\\r\\n                    \'tmplvarid\' => $key,\\r\\n                    \'contentid\' => $resourceId,\\r\\n                );\\r\\n                $linguaSiteTmplvarContentvalues = $modx->getObject(\'linguaSiteTmplvarContentvalues\', $params);\\r\\n                if (!$linguaSiteTmplvarContentvalues) {\\r\\n                    $linguaSiteTmplvarContentvalues = $modx->newObject(\'linguaSiteTmplvarContentvalues\');\\r\\n                }\\r\\n                $linguaSiteTmplvarContentvalues->set(\'lang_id\', $langId);\\r\\n                $linguaSiteTmplvarContentvalues->set(\'tmplvarid\', $key);\\r\\n                $linguaSiteTmplvarContentvalues->set(\'contentid\', $resourceId);\\r\\n                $linguaSiteTmplvarContentvalues->set(\'value\', $val);\\r\\n                $linguaSiteTmplvarContentvalues->save();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/ clear cache\\r\\n        $contexts = array($resource->get(\'context_key\'));\\r\\n        $cacheManager = $modx->getCacheManager();\\r\\n        $cacheManager->refresh(array(\\r\\n            \'lingua\\/resource\' => array(\'contexts\' => $contexts),\\r\\n        ));\\r\\n        break;\\r\\n\\r\\n    case \'OnResourceDuplicate\':\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            $currentContext = $oldResource->get(\'context_key\');\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            $currentParent = $oldResource->get(\'parent\');\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n        if (!empty($ids)) {\\r\\n            $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n            $currentId = $oldResource->get(\'id\');\\r\\n            if (!in_array($currentId, $ids)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $linguaSiteContents = $modx->getCollection(\'linguaSiteContent\', array(\\r\\n            \'resource_id\' => $oldResource->get(\'id\')\\r\\n        ));\\r\\n        if ($linguaSiteContents) {\\r\\n            foreach ($linguaSiteContents as $linguaSiteContent) {\\r\\n                $params = $linguaSiteContent->toArray();\\r\\n                unset($params[\'id\']);\\r\\n                $params[\'resource_id\'] = $newResource->get(\'id\');\\r\\n                $newLinguaSiteContent = $modx->newObject(\'linguaSiteContent\');\\r\\n                $newLinguaSiteContent->fromArray($params);\\r\\n                $newLinguaSiteContent->save();\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n\\r\\n    case \'OnEmptyTrash\':\\r\\n        if (!empty($ids) && is_array($ids)) {\\r\\n            $collection = $modx->getCollection(\'linguaSiteContent\', array(\\r\\n                \'resource_id:IN\' => $ids\\r\\n            ));\\r\\n            if ($collection) {\\r\\n                foreach ($collection as $item) {\\r\\n                    $item->remove();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n\\r\\n    case \'OnTemplateSave\':\\r\\n    case \'OnTempFormSave\':\\r\\n    case \'OnTVFormSave\':\\r\\n    case \'OnSnipFormSave\':\\r\\n    case \'OnPluginFormSave\':\\r\\n    case \'OnMediaSourceFormSave\':\\r\\n    case \'OnChunkFormSave\':\\r\\n    case \'OnSiteRefresh\':\\r\\n        $cacheManager = $modx->getCacheManager();\\r\\n        $cacheManager->refresh(array(\\r\\n            \'lingua\\/resource\' => array(),\\r\\n        ));\\r\\n        break;\\r\\n\\r\\n    default:\\r\\n        break;\\r\\n}\\r\\nreturn;","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"","content":"header(\'Content-Type: text\\/html; charset=utf-8\');\\r\\n\\/**\\r\\n * Lingua\\r\\n *\\r\\n * Copyright 2013-2014 by goldsky <goldsky@virtudraft.com>\\r\\n *\\r\\n * This file is part of Lingua, a MODX\'s Lexicon switcher for front-end interface\\r\\n *\\r\\n * Lingua is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation version 3.\\r\\n *\\r\\n * Lingua is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * Lingua; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package lingua\\r\\n * @subpackage lingua_plugin\\r\\n *\\/\\r\\n$event = $modx->event->name;\\r\\nswitch ($event) {\\r\\n    case \'OnHandleRequest\': \\/\\/ for global\\r\\n        break;\\r\\n\\r\\n    case \'OnInitCulture\':   \\/\\/ for request class\\r\\n        if ($modx->context->key === \'mgr\') {\\r\\n            return;\\r\\n        }\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n        $modx->lexicon->load(\'lingua:default\');\\r\\n        $langGetKey = $modx->getOption(\'lingua.request_key\', $scriptProperties, \'lang\');\\r\\n        $langGetKeyValue = filter_input(INPUT_GET, $langGetKey, FILTER_SANITIZE_STRING);\\r\\n        $langGetKeyValue = strtolower($langGetKeyValue);\\r\\n        $langCookieValue = filter_input(INPUT_COOKIE, \'modx_lingua_switcher\', FILTER_SANITIZE_STRING);\\r\\n        $langCookieValue = strtolower($langCookieValue);\\r\\n        if (!empty($langGetKeyValue) &&\\r\\n                $langGetKeyValue !== $modx->cultureKey &&\\r\\n                strlen($langGetKeyValue) === 2\\r\\n        ) {\\r\\n            $lingua->setCultureKey($langGetKeyValue);\\r\\n        } else if (!empty($langCookieValue) &&\\r\\n                $langCookieValue !== $modx->cultureKey &&\\r\\n                strlen($langCookieValue) === 2\\r\\n        ) {\\r\\n            $lingua->setCultureKey($langCookieValue);\\r\\n        } else if(empty($langGetKeyValue) &&\\r\\n                empty($langCookieValue)\\r\\n        ){\\r\\n            $detectBrowser = $modx->getOption(\'lingua.detect_browser\');\\r\\n            if ($detectBrowser === \'1\') {\\r\\n                $languages = explode(\',\', filter_input(INPUT_SERVER, \'HTTP_ACCEPT_LANGUAGE\', FILTER_SANITIZE_STRING));\\r\\n                $sortedLangs = array();\\r\\n                foreach ($languages as $language) {\\r\\n                    $language = strtolower($language);\\r\\n                    $parts = @explode(\';\', $language);\\r\\n                    if (!isset($parts[1])) {\\r\\n                        $sort = 1.0;\\r\\n                    } else {\\r\\n                        $x = @explode(\'=\', $parts[1]);\\r\\n                        $sort = $x[1] - 0;\\r\\n                    }\\r\\n                    $sortedLangs[$parts[0]] = $sort;\\r\\n                }\\r\\n                arsort($sortedLangs);\\r\\n                $langs = array_keys($sortedLangs);\\r\\n                $linguaLangs = $modx->getCollection(\'linguaLangs\', array(\\r\\n                    \'active\' => 1\\r\\n                ));\\r\\n                $c = $modx->newQuery(\'linguaLangs\');\\r\\n                $c->where(\'active=1\');\\r\\n                $contextLangs = $modx->context->config[\'lingua.langs\'];\\r\\n                if (!empty($contextLangs)) {\\r\\n                    $contextLangs = array_map(\'trim\', @explode(\',\', $contextLangs));\\r\\n                    $c->where(array(\\r\\n                        \'lang_code:IN\' => $contextLangs\\r\\n                    ));\\r\\n                }\\r\\n                $linguaLangs = $modx->getCollection(\'linguaLangs\', $c);\\r\\n                $existingLangs = array();\\r\\n                if ($linguaLangs) {\\r\\n                    foreach ($linguaLangs as $linguaLang) {\\r\\n                        $existingLangs[] = $linguaLang->get(\'lang_code\');\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                $acceptedLangs = array_intersect($existingLangs, $langs);\\r\\n                $acceptedLangs = array_values($acceptedLangs); \\/\\/ reset index\\r\\n\\r\\n                if (!empty($acceptedLangs) && is_array($acceptedLangs)) {\\r\\n                    $lingua->setCultureKey($acceptedLangs[0]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        $modx->cultureKey = $lingua->getCultureKey();\\r\\n        if ($modx->cultureKey !== $modx->getOption(\'cultureKey\')) {\\r\\n            $modx->setOption(\'cultureKey\', $modx->cultureKey);\\r\\n            $modx->context->config[\'cultureKey\'] = $modx->cultureKey;\\r\\n        }\\r\\n        $modx->setPlaceholder(\'lingua.cultureKey\', $modx->cultureKey);\\r\\n        $modx->setPlaceholder(\'lingua.language\', $modx->cultureKey);\\r\\n        \\r\\n        break;\\r\\n\\r\\n    \\/**\\r\\n     * \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ MANAGER SIDE \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n     *\\/\\r\\n    case \'OnDocFormPrerender\':\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            if ($resource) {\\r\\n                $currentContext = $resource->get(\'context_key\');\\r\\n            } else {\\r\\n                $currentContext = filter_input(INPUT_GET, \'context_key\', FILTER_SANITIZE_STRING);\\r\\n            }\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            if ($resource) {\\r\\n                $currentParent = $resource->get(\'parent\');\\r\\n            } else {\\r\\n                $currentParent = filter_input(INPUT_GET, \'parent\', FILTER_SANITIZE_NUMBER_INT);\\r\\n            }\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        if (is_object($resource)) {\\r\\n            $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n            if (!empty($ids)) {\\r\\n                $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n                $currentId = $resource->get(\'id\');\\r\\n                if (!in_array($currentId, $ids)) {\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        $modx->lexicon->load(\'lingua:default\');\\r\\n        $languages = $lingua->getLanguages();\\r\\n        if (empty($languages)) {\\r\\n            return;\\r\\n        }\\r\\n        $modx->regClientCSS(MODX_BASE_URL . \'assets\\/components\\/lingua\\/css\\/mgr.css\');\\r\\n        $modx->controller->addJavascript(MODX_BASE_URL . \'assets\\/components\\/lingua\\/js\\/mgr\\/resource.js\');\\r\\n        \\/\\/ $modx->getOption(\'cultureKey\') doesn\'t work!\\r\\n        $modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\r\\n        $cultureKey = $modCultureKey->get(\'value\');\\r\\n        $storeData = array();\\r\\n        $storeDefaultData = array();\\r\\n        $configLang = array();\\r\\n        $linguaSiteContentArray = array();\\r\\n        $createHiddenFields = array();\\r\\n        foreach ($languages as $language) {\\r\\n            $configLang[$language[\'lang_code\']] = array(\\r\\n                \'lang_code\' => $language[\'lang_code\'],\\r\\n                \'local_name\' => $language[\'local_name\'],\\r\\n                \'flag\' => $language[\'flag\'],\\r\\n            );\\r\\n            if ($language[\'lang_code\'] === $cultureKey) {\\r\\n                $storeDefaultData[] = array(\\r\\n                    $language[\'lang_code\'],\\r\\n                    $language[\'local_name\'],\\r\\n                    $language[\'flag\'],\\r\\n                );\\r\\n                continue;\\r\\n            }\\r\\n            $storeData[] = array(\\r\\n                $language[\'lang_code\'],\\r\\n                $language[\'local_name\'],\\r\\n                $language[\'flag\'],\\r\\n            );\\r\\n            if ($mode === modSystemEvent::MODE_UPD) {\\r\\n                $linguaSiteContent = $modx->getObject(\'linguaSiteContent\', array(\\r\\n                    \'resource_id\' => $resource->get(\'id\'),\\r\\n                    \'lang_id\' => $language[\'id\']\\r\\n                ));\\r\\n                if ($linguaSiteContent) {\\r\\n                    $linguaSiteContentArray[$language[\'lang_code\']] = $linguaSiteContent->toArray();\\r\\n                } else {\\r\\n                    $linguaSiteContentArray[$language[\'lang_code\']] = array();\\r\\n                }\\r\\n            } else {\\r\\n                $linguaSiteContentArray[$language[\'lang_code\']] = array();\\r\\n            }\\r\\n            $modx->regClientStartupHTMLBlock(\'<style>.icon-lingua-flag-\' . $language[\'lcid_string\'] . \' {background-image: url(\\\\\'..\\/\' . $language[\'flag\'] . \'\\\\\'); background-repeat: no-repeat;}<\\/style>\');\\r\\n            $createHiddenFields[] = $language;\\r\\n        } \\/\\/ foreach ($languages as $language)\\r\\n        \\/\\/------------------------------------------------------------------\\r\\n        $jsHTML = \'\\r\\n    window.lingua = new Lingua({\\r\\n        defaultLang: \\"\' . $cultureKey . \'\\",\\r\\n        langs: \' . json_encode($configLang) . \'\\r\\n    });\\r\\n    lingua.config.siteContent = \' . json_encode($linguaSiteContentArray) . \';\\r\\n    lingua.flagDefaultFields();\\r\\n    lingua.createHiddenFields(\' . json_encode($createHiddenFields) . \');\\r\\n    var actionButtons = Ext.getCmp(\\"modx-action-buttons\\");\\r\\n    if (actionButtons) {\\r\\n        var languageBtn = new Ext.form.ComboBox({\\r\\n            id: \\"lingua-languageBtn\\",\\r\\n            tpl: \\\\\'<tpl for=\\".\\"><div class=\\"x-combo-list-item\\"><img src=\\"..\\/{flag}\\" class=\\"icon\\"\\/> {local_name}<\\/div><\\/tpl>\\\\\',\\r\\n            store: new Ext.data.ArrayStore({\\r\\n                id: 0,\\r\\n                fields: [\\r\\n                    \\"lang_code\\",\\r\\n                    \\"local_name\\",\\r\\n                    \\"flag\\"\\r\\n                ],\\r\\n                data: \' . json_encode(array_merge($storeDefaultData, $storeData)) . \'\\r\\n            }),\\r\\n            valueField: \\"lang_code\\",\\r\\n            displayField: \\"local_name\\",\\r\\n            typeAhead: false,\\r\\n            forceSelection: true,\\r\\n            editable: false,\\r\\n            mode: \\"local\\",\\r\\n            triggerAction: \\"all\\",\\r\\n            \\/\\/emptyText: \\"\' . $languages[$cultureKey][\'local_name\'] . \'\\",\\r\\n            selectOnFocus: true,\\r\\n            width: 150,\\r\\n            listeners: {\\r\\n                select: {\\r\\n                    fn: function(combo, record, index) {\\r\\n                        lingua.switchLanguage(record.get(\\"lang_code\\"));\\r\\n                    },\\r\\n                    scope: this\\r\\n                },\\r\\n                render: {\\r\\n                    fn: function(comboBox) {\\r\\n                        var store = comboBox.store;\\r\\n                        var valueField = comboBox.valueField;\\r\\n                        var displayField = comboBox.displayField;\\r\\n                        var recordNumber = store.findExact(valueField, \\"\' . $cultureKey . \'\\", 0);\\r\\n                        if (recordNumber !== -1) {\\r\\n                            var displayValue = store.getAt(recordNumber).data[displayField];\\r\\n                            comboBox.setValue(\\"\' . $cultureKey . \'\\");\\r\\n                            comboBox.setRawValue(displayValue);\\r\\n                            comboBox.selectedIndex = recordNumber;\\r\\n                        }\\r\\n                    },\\r\\n                    scope: this\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n        actionButtons.insertButton(0, [languageBtn, \\"-\\"]);\\r\\n        actionButtons.doLayout();\\r\\n    }\';\\r\\n        $modx->controller->addHtml(\'\\r\\n<script type=\\"text\\/javascript\\">\\r\\nExt.onReady(function() {\\r\\n    \' . $jsHTML . \'\\r\\n});\\r\\n<\\/script>\');\\r\\n        \\/\\/------------------------------------------------------------------\\r\\n        break;\\r\\n\\r\\n    case \'OnResourceTVFormRender\':\\r\\n        if (!is_object($resource) && is_numeric($resource)) {\\r\\n            $resourceId = $resource;\\r\\n            $resource = $modx->getObject(\'modResource\', $resource);\\r\\n        }\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            if ($resource) {\\r\\n                $currentContext = $resource->get(\'context_key\');\\r\\n            } else {\\r\\n                $currentContext = filter_input(INPUT_GET, \'context_key\', FILTER_SANITIZE_STRING);\\r\\n            }\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            if ($resource) {\\r\\n                $currentParent = $resource->get(\'parent\');\\r\\n            } else {\\r\\n                $currentParent = filter_input(INPUT_GET, \'parent\', FILTER_SANITIZE_NUMBER_INT);\\r\\n            }\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        if (is_object($resource)) {\\r\\n            $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n            if (!empty($ids)) {\\r\\n                $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n                $currentId = $resource->get(\'id\');\\r\\n                if (!in_array($currentId, $ids)) {\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n        $languages = $lingua->getLanguages(1, false);\\r\\n        if (empty($languages)) {\\r\\n            return;\\r\\n        }\\r\\n        $initAllClonedTVFields = array();\\r\\n        foreach ($languages as $language) {\\r\\n            $initAllClonedTVFields[] = $language;\\r\\n        }\\r\\n\\r\\n        if ($resource) {\\r\\n            $tvs = $resource->getTemplateVars();\\r\\n        } else {\\r\\n            $templateId = $template;\\r\\n            $template = $modx->getObject(\'modTemplate\', $templateId);\\r\\n            $tvs = $template->getTemplateVars();\\r\\n        }\\r\\n        if (!$tvs) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        $tvIds = array();\\r\\n        $tvOutputs = array();\\r\\n        foreach ($tvs as $tv) {\\r\\n            $tvIds[] = $tv->get(\'id\');\\r\\n        }\\r\\n        $c = $modx->newQuery(\'linguaSiteTmplvars\');\\r\\n        $c->where(array(\\r\\n            \'tmplvarid:IN\' => $tvIds\\r\\n        ));\\r\\n        $linguaSiteTmplvars = $modx->getCollection(\'linguaSiteTmplvars\', $c);\\r\\n        if (!$linguaSiteTmplvars) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        $formElements = array();\\r\\n        foreach ($scriptProperties[\'categories\'] as $category) {\\r\\n            foreach ($category[\'tvs\'] as $tv) {\\r\\n                $formElements[$tv->get(\'id\')] = $tv;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!empty($modx->controller->scriptProperties[\'showCheckbox\'])) {\\r\\n            $showCheckbox = 1;\\r\\n        }\\r\\n\\r\\n        $tmplvars = array();\\r\\n        $cloneTVFields = array();\\r\\n        $count = 0;\\r\\n        \\/\\/ $modx->getOption(\'cultureKey\') doesn\'t work!\\r\\n        $modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\r\\n        $cultureKey = $modCultureKey->get(\'value\');\\r\\n        foreach ($linguaSiteTmplvars as $linguaTv) {\\r\\n            $tvId = $linguaTv->get(\'tmplvarid\');\\r\\n            if (!isset($formElements[$tvId])) {\\r\\n                continue;\\r\\n            }\\r\\n            $tv = $formElements[$tvId];\\r\\n            $tmplvars[] = array(\\r\\n                \'id\' => $tvId,\\r\\n                \'type\' => $tv->get(\'type\'),\\r\\n            );\\r\\n            $tvArray = $tv->toArray(\'tv.\');\\r\\n            foreach ($languages as $language) {\\r\\n                if ($language[\'lang_code\'] === $cultureKey) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                $linguaTVContent = $modx->getObject(\'linguaSiteTmplvarContentvalues\', array(\\r\\n                    \'tmplvarid\' => $tvId,\\r\\n                    \'contentid\' => $resourceId,\\r\\n                    \'lang_id\' => $language[\'id\']\\r\\n                ));\\r\\n\\r\\n                \\/**\\r\\n                 * Start to manipulate the ID to parse hidden TVs\\r\\n                 *\\/\\r\\n                $content = \'\';\\r\\n                if ($linguaTVContent) {\\r\\n                    $content = $linguaTVContent->get(\'value\');\\r\\n                }\\r\\n                $inputForm = $tv->renderInput($resource, array(\\r\\n                    \'value\' => $content\\r\\n                ));\\r\\n                if (empty($inputForm)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                $tvCloneId = $tvId . \'_\' . $language[\'lang_code\'] . \'_lingua_tv\';\\r\\n                \\/\\/ basic replacements\\r\\n                $cloneInputForm = $inputForm;\\r\\n                $cloneInputForm = preg_replace(\'\\/(\\"|\\\\\'){1}tv\' . $tvId . \'(\\"|\\\\\'){1}\\/\', \'${1}tv\' . $tvCloneId . \'${2}\', $cloneInputForm);\\r\\n                $cloneInputForm = preg_replace(\'\\/(\\"|\\\\\'){1}tv\' . $tvId . \'\\\\[\\\\](\\"|\\\\\'){1}\\/\', \'${1}tv\' . $tvCloneId . \'[]${2}\', $cloneInputForm);\\r\\n                \\/\\/ advanced replacements\\r\\n                $linguaSiteTmplvarsPatterns = $modx->getCollection(\'linguaSiteTmplvarsPatterns\', array(\\r\\n                    \'type\' => $tv->get(\'type\')\\r\\n                ));\\r\\n                if ($linguaSiteTmplvarsPatterns) {\\r\\n                    foreach ($linguaSiteTmplvarsPatterns as $pattern) {\\r\\n                        $search = $pattern->get(\'search\');\\r\\n                        $search = str_replace(\'{{tvId}}\', $tvId, $search);\\r\\n                        $replacement = $pattern->get(\'replacement\');\\r\\n                        $replacement = str_replace(\'{{tvCloneId}}\', $tvCloneId, $replacement);\\r\\n                        $cloneInputForm = preg_replace($search, $replacement, $cloneInputForm);\\r\\n                    }\\r\\n                }\\r\\n                $count++;\\r\\n                $phs = $tvArray;\\r\\n                $phs[\'tv.id\'] = $tvCloneId;\\r\\n                $phs[\'tv.formElement\'] = $cloneInputForm;\\r\\n                $phs[\'tv.showCheckbox\'] = $showCheckbox;\\r\\n                $cloneTVFields[] = $lingua->processElementTags($lingua->parseTpl(\'lingua.resourcetv.row\', $phs));\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/\\/ reset any left out output after rendering TV forms above\\r\\n        if ($modx->event->name === \'OnTVInputRenderList\') {\\r\\n            $modx->event->_output = \'\';\\r\\n        }\\r\\n\\r\\n        $modx->event->output(@implode(\\"\\\\n\\", $cloneTVFields));    \\r\\n        $jsHTML = \\"\\r\\n<script>\\r\\n    Ext.onReady(function() {\\r\\n        lingua.config.tmplvars = \\" . json_encode($tmplvars) . \\";\\r\\n        lingua.initAllClonedTVFields(\\" . json_encode($initAllClonedTVFields) . \\");\\r\\n        lingua.flagDefaultTVFields();\\r\\n    });\\r\\n<\\/script>\\";\\r\\n        $modx->event->output($jsHTML);\\r\\n\\r\\n        break;\\r\\n\\r\\n    case \'OnDocFormSave\':\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            $currentContext = $resource->get(\'context_key\');\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            $currentParent = $resource->get(\'parent\');\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n        if (!empty($ids)) {\\r\\n            $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n            $currentId = $resource->get(\'id\');\\r\\n            if (!in_array($currentId, $ids)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $lingua = $modx->getService(\'lingua\', \'Lingua\', MODX_CORE_PATH . \'components\\/lingua\\/model\\/lingua\\/\');\\r\\n        if (!($lingua instanceof Lingua)) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        \\/\\/ update linguaSiteContent\\r\\n        $reverting = array();\\r\\n        $clearKeys = array();\\r\\n        \\/\\/ $modx->getOption(\'cultureKey\') doesn\'t work!\\r\\n        $modCultureKey = $modx->getObject(\'modSystemSetting\', array(\'key\' => \'cultureKey\'));\\r\\n        $cultureKey = $modCultureKey->get(\'value\');\\r\\n        foreach ($resource->_fields as $k => $v) {\\r\\n            if (!preg_match(\'\\/_lingua$\\/\', $k)) {\\r\\n                continue;\\r\\n            }\\r\\n            foreach ($v as $a => $b) {\\r\\n                if ($a === $cultureKey) {\\r\\n                    continue;\\r\\n                }\\r\\n                $reverting[$a][preg_replace(\'\\/_lingua$\\/\', \'\', $k)] = $b;\\r\\n            }\\r\\n            $clearKeys[] = $k;\\r\\n        }\\r\\n\\r\\n        $resourceId = $resource->get(\'id\');\\r\\n        foreach ($reverting as $k => $v) {\\r\\n            $linguaLangs = $modx->getObject(\'linguaLangs\', array(\'lang_code\' => $k));\\r\\n            $params = array(\\r\\n                \'resource_id\' => $resourceId,\\r\\n                \'lang_id\' => $linguaLangs->get(\'id\'),\\r\\n            );\\r\\n            $linguaSiteContent = $modx->getObject(\'linguaSiteContent\', $params);\\r\\n            if (!$linguaSiteContent) {\\r\\n                $linguaSiteContent = $modx->newObject(\'linguaSiteContent\');\\r\\n                $linguaSiteContent->fromArray($params);\\r\\n                $linguaSiteContent->save();\\r\\n            }\\r\\n            $linguaSiteContent->set(\'pagetitle\', $v[\'pagetitle\']);\\r\\n            $linguaSiteContent->set(\'longtitle\', $v[\'longtitle\']);\\r\\n            $linguaSiteContent->set(\'description\', $v[\'description\']);\\r\\n            $linguaSiteContent->set(\'content\', (isset($v[\'content\']) && !empty($v[\'content\']) ? $v[\'content\'] : $v[\'ta\']));\\r\\n            if (empty($v[\'alias\'])) {\\r\\n                $v[\'alias\'] = $resource->get(\'alias\');\\r\\n                $linguaSiteContent->setDirty(\'alias\');\\r\\n            }\\r\\n            $linguaSiteContent->set(\'introtext\', $v[\'introtext\']);\\r\\n            $linguaSiteContent->set(\'alias\', $v[\'alias\']);\\r\\n            $linguaSiteContent->set(\'menutitle\', $v[\'menutitle\']);\\r\\n            $linguaSiteContent->set(\'link_attributes\', $v[\'link_attributes\']);\\r\\n            $linguaSiteContent->set(\'uri_override\', $v[\'uri_override\']);\\r\\n            $linguaSiteContent->set(\'uri\', $v[\'uri\']);\\r\\n            $linguaSiteContent->set(\'parent\', $resource->get(\'parent\'));\\r\\n            $linguaSiteContent->set(\'isfolder\', $resource->get(\'isfolder\'));\\r\\n            $linguaSiteContent->set(\'context_key\', $resource->get(\'context_key\'));\\r\\n            $linguaSiteContent->set(\'content_type\', $resource->get(\'content_type\'));\\r\\n            if ($resource->get(\'refreshURIs\')) {\\r\\n                $linguaSiteContent->set(\'refreshURIs\', true);\\r\\n            }\\r\\n            $linguaSiteContent->save();\\r\\n        }\\r\\n\\r\\n        \\/\\/ update linguaSiteTmplvarContentvalues\\r\\n        $reverting = array();\\r\\n        foreach ($resource->_fields as $k => $value) {\\r\\n            if (!preg_match(\'\\/_lingua_tv$\\/\', $k)) {\\r\\n                continue;\\r\\n            }\\r\\n            $tvKey = preg_replace(\'\\/_lingua_tv$\\/\', \'\', $k);\\r\\n            $tvKeys = @explode(\'_\', $tvKey);\\r\\n            $tvId = str_replace(\'tv\', \'\', $tvKeys[0]);\\r\\n            if (!is_numeric($tvId)) {\\r\\n                continue;\\r\\n            }\\r\\n            $reverse = array_reverse($tvKeys);\\r\\n            $lang = $reverse[0];\\r\\n            if ($lang === $cultureKey) {\\r\\n                continue;\\r\\n            }\\r\\n            $tv = $modx->getObject(\'modTemplateVar\', $tvId);\\r\\n            $tvKey = $tvKeys[0];\\r\\n            \\/* validation for different types *\\/\\r\\n            switch ($tv->get(\'type\')) {\\r\\n                case \'url\':\\r\\n                    \\/\\/ tv16_prefix_id_lingua_tv\\r\\n                    $prefix = $resource->_fields[$tvKey . \'_prefix_\' . $lang . \'_lingua_tv\'];\\r\\n                    if ($prefix != \'--\') {\\r\\n                        $value = str_replace(array(\'ftp:\\/\\/\', \'http:\\/\\/\', \'https:\\/\\/\', \'ftp:\\/\\/\', \'mailto:\'), \'\', $value);\\r\\n                        $value = $prefix . $value;\\r\\n                    }\\r\\n                    $reverting[$lang][$tvId] = $value;\\r\\n\\r\\n                    break;\\r\\n                case \'date\':\\r\\n                    $value = empty($value) ? \'\' : strftime(\'%Y-%m-%d %H:%M:%S\', strtotime($value));\\r\\n\\r\\n                    break;\\r\\n                \\/* ensure tag types trim whitespace from tags *\\/\\r\\n                case \'tag\':\\r\\n                case \'autotag\':\\r\\n                    $tags = explode(\',\', $value);\\r\\n                    $newTags = array();\\r\\n                    foreach ($tags as $tag) {\\r\\n                        $newTags[] = trim($tag);\\r\\n                    }\\r\\n                    $value = implode(\',\', $newTags);\\r\\n\\r\\n                    break;\\r\\n                default:\\r\\n                    \\/* handles checkboxes & multiple selects elements *\\/\\r\\n                    if (is_array($value)) {\\r\\n                        $featureInsert = array();\\r\\n                        while (list($featureValue, $featureItem) = each($value)) {\\r\\n                            if (empty($featureItem)) {\\r\\n                                continue;\\r\\n                            }\\r\\n                            $featureInsert[count($featureInsert)] = $featureItem;\\r\\n                        }\\r\\n                        $value = implode(\'||\', $featureInsert);\\r\\n                    }\\r\\n\\r\\n                    break;\\r\\n            }\\r\\n            $reverting[$lang][$tvId] = $value;\\r\\n            $clearKeys[] = $k;\\r\\n        }\\r\\n\\r\\n        \\/**\\r\\n         * json seems to have number of characters limit;\\r\\n         * that makes saving success report truncated and output modal hangs,\\r\\n         * TV\'s procces does this outside of reverting\'s loops\\r\\n         *\\/\\r\\n        if (!empty($clearKeys)) {\\r\\n            foreach ($clearKeys as $k) {\\r\\n                $resource->set($k, \'\');\\r\\n            }\\r\\n        }\\r\\n\\r\\n        foreach ($reverting as $k => $tmplvars) {\\r\\n            $linguaLangs = $modx->getObject(\'linguaLangs\', array(\'lang_code\' => $k));\\r\\n            $langId = $linguaLangs->get(\'id\');\\r\\n            foreach ($tmplvars as $key => $val) {\\r\\n                if (empty($val)) {\\r\\n                    continue;\\r\\n                }\\r\\n                $params = array(\\r\\n                    \'lang_id\' => $langId,\\r\\n                    \'tmplvarid\' => $key,\\r\\n                    \'contentid\' => $resourceId,\\r\\n                );\\r\\n                $linguaSiteTmplvarContentvalues = $modx->getObject(\'linguaSiteTmplvarContentvalues\', $params);\\r\\n                if (!$linguaSiteTmplvarContentvalues) {\\r\\n                    $linguaSiteTmplvarContentvalues = $modx->newObject(\'linguaSiteTmplvarContentvalues\');\\r\\n                }\\r\\n                $linguaSiteTmplvarContentvalues->set(\'lang_id\', $langId);\\r\\n                $linguaSiteTmplvarContentvalues->set(\'tmplvarid\', $key);\\r\\n                $linguaSiteTmplvarContentvalues->set(\'contentid\', $resourceId);\\r\\n                $linguaSiteTmplvarContentvalues->set(\'value\', $val);\\r\\n                $linguaSiteTmplvarContentvalues->save();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/ clear cache\\r\\n        $contexts = array($resource->get(\'context_key\'));\\r\\n        $cacheManager = $modx->getCacheManager();\\r\\n        $cacheManager->refresh(array(\\r\\n            \'lingua\\/resource\' => array(\'contexts\' => $contexts),\\r\\n        ));\\r\\n        break;\\r\\n\\r\\n    case \'OnResourceDuplicate\':\\r\\n        $contexts = $modx->getOption(\'lingua.contexts\', $scriptProperties, \'web\');\\r\\n        if (!empty($contexts)) {\\r\\n            $contexts = array_map(\'trim\', @explode(\',\', $contexts));\\r\\n            $currentContext = $oldResource->get(\'context_key\');\\r\\n            if (!in_array($currentContext, $contexts)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $parents = $modx->getOption(\'lingua.parents\', $scriptProperties);\\r\\n        if (!empty($parents)) {\\r\\n            $parents = array_map(\'trim\', @explode(\',\', $parents));\\r\\n            $currentParent = $oldResource->get(\'parent\');\\r\\n            if (!in_array($currentParent, $parents)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $ids = $modx->getOption(\'lingua.ids\', $scriptProperties);\\r\\n        if (!empty($ids)) {\\r\\n            $ids = array_map(\'trim\', @explode(\',\', $ids));\\r\\n            $currentId = $oldResource->get(\'id\');\\r\\n            if (!in_array($currentId, $ids)) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $linguaSiteContents = $modx->getCollection(\'linguaSiteContent\', array(\\r\\n            \'resource_id\' => $oldResource->get(\'id\')\\r\\n        ));\\r\\n        if ($linguaSiteContents) {\\r\\n            foreach ($linguaSiteContents as $linguaSiteContent) {\\r\\n                $params = $linguaSiteContent->toArray();\\r\\n                unset($params[\'id\']);\\r\\n                $params[\'resource_id\'] = $newResource->get(\'id\');\\r\\n                $newLinguaSiteContent = $modx->newObject(\'linguaSiteContent\');\\r\\n                $newLinguaSiteContent->fromArray($params);\\r\\n                $newLinguaSiteContent->save();\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n\\r\\n    case \'OnEmptyTrash\':\\r\\n        if (!empty($ids) && is_array($ids)) {\\r\\n            $collection = $modx->getCollection(\'linguaSiteContent\', array(\\r\\n                \'resource_id:IN\' => $ids\\r\\n            ));\\r\\n            if ($collection) {\\r\\n                foreach ($collection as $item) {\\r\\n                    $item->remove();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n\\r\\n    case \'OnTemplateSave\':\\r\\n    case \'OnTempFormSave\':\\r\\n    case \'OnTVFormSave\':\\r\\n    case \'OnSnipFormSave\':\\r\\n    case \'OnPluginFormSave\':\\r\\n    case \'OnMediaSourceFormSave\':\\r\\n    case \'OnChunkFormSave\':\\r\\n    case \'OnSiteRefresh\':\\r\\n        $cacheManager = $modx->getCacheManager();\\r\\n        $cacheManager->refresh(array(\\r\\n            \'lingua\\/resource\' => array(),\\r\\n        ));\\r\\n        break;\\r\\n\\r\\n    default:\\r\\n        break;\\r\\n}\\r\\nreturn;"}',
        'guid' => '0646a137aba3affbf71488d5a35e16f6',
        'native_key' => 0,
        'signature' => 'ba00db411fb138ea8350d82f3f530a59',
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            '7426bfe7bbecc3fcf7a733d6267ca6d7' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnHandleRequest","priority":0,"propertyset":0}',
              'guid' => '18f173f2b0d333893ab2db318757892b',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnHandleRequest',
              ),
              'signature' => '860bc40fadad25bc27d36b1c37c2a0a5',
            ),
            '7aa3e9c8efa905eec87b3bcf0adf07f2' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnInitCulture","priority":0,"propertyset":0}',
              'guid' => '42be99b149cb3176bb9f51d5993aae6f',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnInitCulture',
              ),
              'signature' => 'aad75e75bb7f96ca93dbb0f27505eb9e',
            ),
            'e459d2736f4911a2e427f346d1d7e170' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
              'guid' => 'db77c8a42cae7420f0396d7ad9f2adf8',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormPrerender',
              ),
              'signature' => '12e37e89eabd9eb0d9f3bb49e57d93b0',
            ),
            'f5fea99b84b399e7d35f0b0f86957213' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnResourceTVFormRender","priority":0,"propertyset":0}',
              'guid' => '77b97d096b01e55a8681aa16943b3724',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnResourceTVFormRender',
              ),
              'signature' => '650f6300f9c45261e8215d1493296feb',
            ),
            'd21fb3515a907391aca1dfe1ac7090da' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormSave","priority":0,"propertyset":0}',
              'guid' => '83ff760f22c6b14cac7e3ca54cdaadea',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormSave',
              ),
              'signature' => 'e5cae2a8304127eea6e2992ff1133672',
            ),
            '3a4d40da4723d473b187d479bf22f0f6' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnResourceDuplicate","priority":0,"propertyset":0}',
              'guid' => '68fbe07952a43471897e454b888eea34',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnResourceDuplicate',
              ),
              'signature' => 'e5765b00b987695443804fc297ad4fde',
            ),
            '68efff6fc80ce5dbbb7fdfcc4a5c27db' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnEmptyTrash","priority":0,"propertyset":0}',
              'guid' => '95827a90ae37fc42f9a2b7c681f0aaf0',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnEmptyTrash',
              ),
              'signature' => 'bce54bfdf7fd72413d4a87bafd92051b',
            ),
            '63eeb6bda72ff8e651924486ec5eb94d' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTemplateSave","priority":0,"propertyset":0}',
              'guid' => '23c538a4f18a0ede20895edbb938a19f',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTemplateSave',
              ),
              'signature' => 'def68d4453f3fec6089aa1ddc536a844',
            ),
            '811c72dca03788137da7651bca74621e' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTempFormSave","priority":0,"propertyset":0}',
              'guid' => '0fcee603420f2a3a81a78e29b493c2d3',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTempFormSave',
              ),
              'signature' => '8f3578da3c50f24f866b38570f146010',
            ),
            'a8207365add013adfcb5cb251b4d3b8d' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTVFormSave","priority":0,"propertyset":0}',
              'guid' => 'b48190f8cf5bc526f70ad659098830b0',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTVFormSave',
              ),
              'signature' => '5d0b7aa7a341d51f7cd934ea433b34bc',
            ),
            '3544c69604f7e42d43c81717da288702' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnSnipFormSave","priority":0,"propertyset":0}',
              'guid' => '38cf31e56c6e446557b476050223c05e',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnSnipFormSave',
              ),
              'signature' => 'a9de316ef6d60d8507ea5ace872c8bbc',
            ),
            'e0320e7e4d7aa82ca3739a4e49747592' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnPluginFormSave","priority":0,"propertyset":0}',
              'guid' => '1bfa4def0aa9aef7d96dcf41a33cb299',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnPluginFormSave',
              ),
              'signature' => '34a9f90daae6a13205c119838444db44',
            ),
            'b27f10005ae57f0eca513009e8d358ac' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnMediaSourceFormSave","priority":0,"propertyset":0}',
              'guid' => '7e44be0048102c6d4d78a4fec4b5fe3a',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnMediaSourceFormSave',
              ),
              'signature' => '0ed8708c1016dd9a67215851f0de4ba7',
            ),
            'f5a6e12c886b1b7a823a80b5af9f2c9c' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnChunkFormSave","priority":0,"propertyset":0}',
              'guid' => 'd8a5a904ca6c1998eeb1f9473a15fbfe',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnChunkFormSave',
              ),
              'signature' => '6763ff3d8e1d08a87ef49b64fb3b0ade',
            ),
            '5f530d3737c94a0e072c546e05e276f2' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnSiteRefresh","priority":0,"propertyset":0}',
              'guid' => 'e5535ab8576ef1102038d79e7f3ae964',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnSiteRefresh',
              ),
              'signature' => '9ec1184561e99da7f13d6b15606bb31d',
            ),
          ),
        ),
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => false,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'lingua',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"lingua-2.0.1-pl\\/modCategory\\/45743a187acb75d9549b29adb81a8e6b\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"lingua"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"lingua-2.0.1-pl\\/modCategory\\/45743a187acb75d9549b29adb81a8e6b\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"lingua"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"lingua-2.0.1-pl\\/modCategory\\/45743a187acb75d9549b29adb81a8e6b.tables.resolver.resolver","type":"php","name":"tables.resolver"}',
    ),
  ),
  'validate' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"lingua-2.0.1-pl\\/modCategory\\/45743a187acb75d9549b29adb81a8e6b.tables.validator.validator","type":"php","name":"tables.validator"}',
    ),
  ),
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '8dd46ac62643d3ced3ce4f81fdc8002a',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '45743a187acb75d9549b29adb81a8e6b',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"Lingua"}',
);