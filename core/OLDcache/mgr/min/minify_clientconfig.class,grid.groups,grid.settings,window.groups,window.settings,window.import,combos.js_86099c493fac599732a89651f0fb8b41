var ClientConfig=function(config){config=config||{};ClientConfig.superclass.constructor.call(this,config);};Ext.extend(ClientConfig,Ext.Component,{page:{},window:{},grid:{},tree:{},panel:{},tabs:{},combo:{},config:{connector_url:''},inVersion:false});Ext.reg('clientconfig',ClientConfig);ClientConfig=new ClientConfig();;ClientConfig.grid.Groups=function(config){config=config||{};Ext.applyIf(config,{url:ClientConfig.config.connectorUrl,id:'clientconfig-grid-groups',baseParams:{action:'mgr/groups/getlist'},emptyText:_('clientconfig.error.noresults'),fields:[{name:'id',type:'int'},{name:'label',type:'string'},{name:'description',type:'string'},{name:'sortorder',type:'int'},{name:'settings_count',type:'int'}],paging:true,remoteSort:true,columns:[{header:_('clientconfig.id'),dataIndex:'id',sortable:true,width:.1},{header:_('clientconfig.label'),dataIndex:'label',sortable:true,width:.3},{header:_('clientconfig.description'),dataIndex:'description',sortable:true,width:.5},{header:_('clientconfig.settings_count'),dataIndex:'settings_count',sortable:true,width:.1}],tbar:[{text:_('clientconfig.add_group'),handler:this.addGroup,scope:this},'->',{text:_('clientconfig.export_groups'),handler:this.exportGroups,scope:this},'-',{text:_('clientconfig.import_groups'),handler:this.importGroups,scope:this}]});ClientConfig.grid.Groups.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.grid.Groups,MODx.grid.Grid,{addGroup:function(){var win=MODx.load({xtype:'clientconfig-window-group',listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this}});win.show();},updateGroup:function(){var record=this.menu.record;var win=MODx.load({xtype:'clientconfig-window-group',listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this},isUpdate:true});win.setValues(record);win.show();},removeGroup:function(){var id=this.menu.record.id;MODx.msg.confirm({title:_('clientconfig.remove_group'),text:_('clientconfig.remove_group.confirm'),url:this.config.url,params:{action:'mgr/groups/remove',id:id},listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this}});},getMenu:function(node){var m=[];m.push({text:_('clientconfig.update_group'),handler:this.updateGroup,scope:this},'-',{text:_('clientconfig.remove_group'),handler:this.removeGroup,scope:this});return m;},exportGroups:function(){Ext.Msg.confirm(_('clientconfig.export_groups'),_('clientconfig.export_groups.confirm'),function(e){if(e=='yes'){window.location=ClientConfig.config.connectorUrl+'?action=mgr/groups/export&HTTP_MODAUTH='+MODx.siteId;}});},importGroups:function(){var win=MODx.load({xtype:'clientconfig-window-import',title:_('clientconfig.import_groups'),introduction:_('clientconfig.import_groups.desc'),what:_('clientconfig.groups'),baseParams:{action:'mgr/groups/import'},listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this}});win.show();}});Ext.reg('clientconfig-grid-groups',ClientConfig.grid.Groups);;ClientConfig.grid.Settings=function(config){config=config||{};Ext.applyIf(config,{url:ClientConfig.config.connectorUrl,id:'clientconfig-grid-settings',baseParams:{action:'mgr/settings/getlist'},emptyText:_('clientconfig.error.noresults'),fields:[{name:'id',type:'int'},{name:'key',type:'string'},{name:'label',type:'string'},{name:'xtype',type:'string'},{name:'description',type:'string'},{name:'is_required',type:'bool'},{name:'value',type:'string'},{name:'default',type:'string'},{name:'group',type:'int'},{name:'group_label',type:'string'},{name:'sortorder',type:'int'},{name:'options',type:'object'}],paging:true,remoteSort:true,columns:[{header:_('clientconfig.id'),dataIndex:'id',sortable:true,width:.1},{header:_('clientconfig.key'),dataIndex:'key',sortable:true,width:.3},{header:_('clientconfig.label'),dataIndex:'label',sortable:true,width:.3},{header:_('clientconfig.xtype'),dataIndex:'xtype',sortable:true,width:.3},{header:_('clientconfig.is_required'),dataIndex:'is_required',sortable:true,width:.1,renderer:this.rendYesNo},{header:_('clientconfig.group'),dataIndex:'group_label',sortable:true,width:.3}],tbar:[{text:_('clientconfig.add_setting'),handler:this.addSetting,scope:this},'->',{emptyText:_('clientconfig.filter_on_group'),xtype:'clientconfig-combo-groups',id:'clientconfig-settings-filter-group',listeners:{select:{fn:function(combo,record){this.getStore().baseParams['group']=record.id;this.getBottomToolbar().changePage(1);},scope:this}},width:250},'-',{text:_('clientconfig.export_settings'),handler:this.exportSettings,scope:this},'-',{text:_('clientconfig.import_settings'),handler:this.importSettings,scope:this}]});ClientConfig.grid.Settings.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.grid.Settings,MODx.grid.Grid,{addSetting:function(){var groups=Ext.getCmp('clientconfig-grid-groups');if(groups.store.data.items.length<1){MODx.msg.alert(_('clientconfig.create_groups_first'),_('clientconfig.create_groups_first.desc'),function(){groups.addGroup();},groups);return;}
var win=MODx.load({xtype:'clientconfig-window-setting',listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this}});win.show();},updateSetting:function(){var record=this.menu.record;var win=MODx.load({xtype:'clientconfig-window-setting',record:record,listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this},isUpdate:true});win.setValues(record);win.show();},duplicateSetting:function(){var record=this.menu.record;record.id=0;record.key=record.key+'_duplicate';var win=MODx.load({xtype:'clientconfig-window-setting',record:record,listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this},isDuplicate:true});win.setValues(record);win.show();},removeSetting:function(){var id=this.menu.record.id;MODx.msg.confirm({title:_('clientconfig.remove_setting'),text:_('clientconfig.remove_setting.confirm'),url:this.config.url,params:{action:'mgr/settings/remove',id:id},listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this}});},getMenu:function(node){var m=[];m.push({text:_('clientconfig.update_setting'),handler:this.updateSetting,scope:this},{text:_('clientconfig.duplicate_setting'),handler:this.duplicateSetting,scope:this},'-',{text:_('clientconfig.remove_setting'),handler:this.removeSetting,scope:this});return m;},filterOnGroup:function(){this.baseParams['group']=Ext.getCmp('clientconfig-settings-filter-group').getValue();this.getBottomToolbar().changePage(1);this.refresh();},exportSettings:function(){Ext.Msg.confirm(_('clientconfig.export_settings'),_('clientconfig.export_settings.confirm'),function(e){if(e=='yes'){window.location=ClientConfig.config.connectorUrl+'?action=mgr/settings/export&HTTP_MODAUTH='+MODx.siteId;}});},importSettings:function(){var win=MODx.load({xtype:'clientconfig-window-import',title:_('clientconfig.import_settings'),introduction:_('clientconfig.import_settings.desc'),what:_('clientconfig.settings'),baseParams:{action:'mgr/settings/import'},listeners:{success:{fn:function(r){this.refresh();},scope:this},scope:this}});win.show();}});Ext.reg('clientconfig-grid-settings',ClientConfig.grid.Settings);;ClientConfig.window.Group=function(config){config=config||{};config.id=config.id||Ext.id(),Ext.applyIf(config,{title:(config.isUpdate)?_('clientconfig.update_group'):_('clientconfig.add_group'),autoHeight:true,url:ClientConfig.config.connectorUrl,baseParams:{action:(config.isUpdate)?'mgr/groups/update':'mgr/groups/create'},width:500,fields:[{xtype:'hidden',name:'id'},{xtype:'textfield',name:'label',fieldLabel:_('clientconfig.label'),allowBlank:false,anchor:'100%'},{xtype:'numberfield',name:'sortorder',fieldLabel:_('clientconfig.sortorder'),allowBlank:false,minValue:0,maxValue:9999999999,anchor:'100%',value:0},{xtype:'textarea',name:'description',fieldLabel:_('clientconfig.description'),anchor:'100%'}],keys:[]});ClientConfig.window.Group.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.window.Group,MODx.Window);Ext.reg('clientconfig-window-group',ClientConfig.window.Group);;ClientConfig.window.Setting=function(config){config=config||{};config.id=config.id||Ext.id(),Ext.applyIf(config,{title:(config.isUpdate)?_('clientconfig.update_setting'):(config.isDuplicate)?_('clientconfig.duplicate_setting'):_('clientconfig.add_setting'),autoHeight:true,url:ClientConfig.config.connectorUrl,baseParams:{action:(config.isUpdate)?'mgr/settings/update':'mgr/settings/create'},width:750,fields:[{xtype:'hidden',name:'id'},{layout:'column',items:[{columnWidth:0.5,layout:'form',items:[{xtype:'textfield',name:'key',fieldLabel:_('clientconfig.key')+'*',allowBlank:false,anchor:'100%'},{xtype:'textfield',name:'label',fieldLabel:_('clientconfig.label')+'*',allowBlank:false,anchor:'100%'},{xtype:'textarea',name:'description',fieldLabel:_('clientconfig.description'),anchor:'100%'},{xtype:'clientconfig-combo-groups',name:'group',fieldLabel:_('clientconfig.group'),anchor:'100%',autoLoad:true,storeLoadListener:function(store,data,request){if(this.getValue()<1){this.setValue(store.getAt(0).get(this.valueField));}
return true;}},{xtype:'numberfield',name:'sortorder',fieldLabel:_('clientconfig.sortorder'),allowBlank:false,minValue:0,maxValue:9999999999,anchor:'100%',value:0}]},{columnWidth:0.5,layout:'form',items:[{xtype:'clientconfig-combo-fieldtypes',name:'xtype',fieldLabel:_('clientconfig.xtype')+'*',allowBlank:false,anchor:'100%',listeners:{select:{fn:function(field,record){if(record.data.xtype=='modx-combo'){Ext.getCmp(config.id+'-options').show();}else{Ext.getCmp(config.id+'-options').hide();}},scope:this}}},{xtype:'textfield',name:'value',fieldLabel:_('clientconfig.value'),anchor:'100%'},{xtype:'textarea',id:config.id+'-options',name:'options',fieldLabel:_('clientconfig.options'),description:_('clientconfig.options.desc'),anchor:'100%',hidden:(config.record&&(config.record.xtype=='modx-combo'))?false:true},{xtype:'checkbox',name:'is_required',boxLabel:_('clientconfig.is_required.long'),anchor:'100%'}]}]}],keys:[]});ClientConfig.window.Setting.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.window.Setting,MODx.Window);Ext.reg('clientconfig-window-setting',ClientConfig.window.Setting);;ClientConfig.window.Import=function(config){config=config||{};config.id=config.id||Ext.id(),Ext.applyIf(config,{url:ClientConfig.config.connectorUrl,autoHeight:true,fileUpload:true,modal:true,width:450,fields:[{xtype:'panel',cls:'panel-desc',html:'<p>'+config.introduction+'</p>',border:false},{xtype:'textfield',fieldLabel:_('clientconfig.import_file'),name:'file',inputType:'file'},{xtype:'radiogroup',fieldLabel:_('clientconfig.import_mode'),columns:1,items:[{boxLabel:_('clientconfig.import_mode.insert',{what:config.what}),name:'mode',inputValue:'insert',checked:true},{boxLabel:_('clientconfig.import_mode.overwrite',{what:config.what}),name:'mode',inputValue:'overwrite'},{boxLabel:_('clientconfig.import_mode.replace',{what:config.what}),name:'mode',inputValue:'replace'}]}],buttons:[{text:_('cancel'),scope:this,handler:function(){this.hide();}},'-',{text:_('clientconfig.start_import'),scope:this,handler:this.submit,cls:'primary-button'}]});ClientConfig.window.Import.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.window.Import,MODx.Window);Ext.reg('clientconfig-window-import',ClientConfig.window.Import);;ClientConfig.combo.Groups=function(config){config=config||{};Ext.applyIf(config,{url:ClientConfig.config.connectorUrl,baseParams:{action:'mgr/groups/getlist',combo:true},fields:['id','label'],hiddenName:config.name||'group',pageSize:15,valueField:'id',displayField:'label'});ClientConfig.combo.Groups.superclass.constructor.call(this,config);if(config.storeLoadListener){this.store.on('load',config.storeLoadListener,this);this.on('render',function(){if(!this.getValue()){this.store.load();}});}};Ext.extend(ClientConfig.combo.Groups,MODx.combo.ComboBox);Ext.reg('clientconfig-combo-groups',ClientConfig.combo.Groups);ClientConfig.combo.FieldTypes=function(config){config=config||{};Ext.applyIf(config,{store:new Ext.data.ArrayStore({mode:'local',fields:['xtype','label'],data:[['textfield',_('clientconfig.xtype.textfield')],['textarea',_('clientconfig.xtype.textarea')],['richtext',_('clientconfig.xtype.richtext')],['modx-panel-tv-image',_('clientconfig.xtype.image')],['numberfield',_('clientconfig.xtype.numberfield')],['colorpickerfield',_('clientconfig.xtype.colorpalette')],['xcheckbox',_('clientconfig.xtype.xcheckbox')],['datefield',_('clientconfig.xtype.datefield')],['timefield',_('clientconfig.xtype.timefield')],['modx-combo',_('clientconfig.xtype.combobox')],['googlefontlist',_('clientconfig.xtype.googlefonts')]]}),hiddenName:config.name||'xtype',valueField:'xtype',displayField:'label',mode:'local',value:'textfield'});if(MODx.config['clientconfig.google_fonts_api_key']=='')config.store.removeAt(config.store.find('xtype','googlefontlist'));ClientConfig.combo.FieldTypes.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.combo.FieldTypes,MODx.combo.ComboBox);Ext.reg('clientconfig-combo-fieldtypes',ClientConfig.combo.FieldTypes);ClientConfig.combo.GoogleFontList=function(config){config=config||{};Ext.applyIf(config,{url:ClientConfig.config.connectorUrl,baseParams:{action:'mgr/fonts/google/getList',combo:true},fields:['family','name'],hiddenName:config.name||'font',valueField:'family',displayField:'name'});ClientConfig.combo.GoogleFontList.superclass.constructor.call(this,config);};Ext.extend(ClientConfig.combo.GoogleFontList,MODx.combo.ComboBox);Ext.reg('googlefontlist',ClientConfig.combo.GoogleFontList);